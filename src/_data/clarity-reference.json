{
  "functions": [
    {
      "name": "+ (add)",
      "snippet": "+ ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(+ i1 i2...)",
      "description": "Adds a variable number of integer inputs and returns the result. In the event of an _overflow_, throws a runtime error.",
      "example": "(+ 1 2 3) ;; Returns 6",
      "version": "Clarity1"
    },
    {
      "name": "- (subtract)",
      "snippet": "- ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(- i1 i2...)",
      "description": "Subtracts a variable number of integer inputs and returns the result. In the event of an _underflow_, throws a runtime error.",
      "example": "(- 2 1 1) ;; Returns 0\n(- 0 3) ;; Returns -3\n",
      "version": "Clarity1"
    },
    {
      "name": "* (multiply)",
      "snippet": "* ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(* i1 i2...)",
      "description": "Multiplies a variable number of integer inputs and returns the result. In the event of an _overflow_, throws a runtime error.",
      "example": "(* 2 3) ;; Returns 6\n(* 5 2) ;; Returns 10\n(* 2 2 2) ;; Returns 8\n",
      "version": "Clarity1"
    },
    {
      "name": "/ (divide)",
      "snippet": "/ ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(/ i1 i2...)",
      "description": "Integer divides a variable number of integer inputs and returns the result. In the event of division by zero, throws a runtime error.",
      "example": "(/ 2 3) ;; Returns 0\n(/ 5 2) ;; Returns 2\n(/ 4 2 2) ;; Returns 1\n",
      "version": "Clarity1"
    },
    {
      "name": "< (less than)",
      "snippet": "< ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "bool",
      "signature": "(< i1 i2)",
      "description": "Compares two integers, returning `true` if `i1` is less than `i2` and `false` otherwise.\ni1 and i2 must be of the same type. Starting with Stacks 1.0, the `<`-comparable types are `int` and `uint`. Starting with Stacks 2.1,\nthe `<`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "example": "(< 1 2) ;; Returns true\n(< 5 2) ;; Returns false\n(< \"aaa\" \"baa\") ;; Returns true\n(< \"aa\" \"aaa\") ;; Returns true\n(< 0x01 0x02) ;; Returns true\n(< 5 u2) ;; Throws type error\n",
      "version": "Clarity1"
    },
    {
      "name": "<= (less than or equal)",
      "snippet": "<= ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "bool",
      "signature": "(<= i1 i2)",
      "description": "Compares two integers, returning true if `i1` is less than or equal to `i2` and `false` otherwise.\ni1 and i2 must be of the same type. Starting with Stacks 1.0, the `<=`-comparable types are `int` and `uint`. Starting with Stacks 2.1,\nthe `<=`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "example": "(<= 1 1) ;; Returns true\n(<= 5 2) ;; Returns false\n(<= \"aaa\" \"baa\") ;; Returns true\n(<= \"aa\" \"aaa\") ;; Returns true\n(<= 0x01 0x02) ;; Returns true\n(<= 5 u2) ;; Throws type error\n",
      "version": "Clarity1"
    },
    {
      "name": "> (greater than)",
      "snippet": "> ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "bool",
      "signature": "(> i1 i2)",
      "description": "Compares two integers, returning `true` if `i1` is greater than `i2` and false otherwise.\ni1 and i2 must be of the same type. Starting with Stacks 1.0, the `>`-comparable types are `int` and `uint`. Starting with Stacks 2.1,\nthe `>`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "example": "(> 1 2) ;; Returns false\n(> 5 2) ;; Returns true\n(> \"baa\" \"aaa\") ;; Returns true\n(> \"aaa\" \"aa\") ;; Returns true\n(> 0x02 0x01) ;; Returns true\n(> 5 u2) ;; Throws type error\n",
      "version": "Clarity1"
    },
    {
      "name": ">= (greater than or equal)",
      "snippet": ">= ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "bool",
      "signature": "(>= i1 i2)",
      "description": "Compares two integers, returning `true` if `i1` is greater than or equal to `i2` and `false` otherwise.\ni1 and i2 must be of the same type. Starting with Stacks 1.0, the `>=`-comparable types are `int` and `uint`. Starting with Stacks 2.1,\nthe `>=`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.\n    ",
      "example": "(>= 1 1) ;; Returns true\n(>= 5 2) ;; Returns true\n(>= \"baa\" \"aaa\") ;; Returns true\n(>= \"aaa\" \"aa\") ;; Returns true\n(>= 0x02 0x01) ;; Returns true\n(>= 5 u2) ;; Throws type error\n",
      "version": "Clarity1"
    },
    {
      "name": "and",
      "snippet": "and ${1:expr-1} ${2:expr-2}",
      "input_type": "bool, ...",
      "output_type": "bool",
      "signature": "(and b1 b2 ...)",
      "description": "Returns `true` if all boolean inputs are `true`. Importantly, the supplied arguments are \nevaluated in-order and lazily. Lazy evaluation means that if one of the arguments returns `false`, the function \nshort-circuits, and no subsequent arguments are evaluated.\n",
      "example": "(and true false) ;; Returns false\n(and (is-eq (+ 1 2) 1) (is-eq 4 4)) ;; Returns false\n(and (is-eq (+ 1 2) 3) (is-eq 4 4)) ;; Returns true\n",
      "version": "Clarity1"
    },
    {
      "name": "append",
      "snippet": "append ${1:list} ${2:element}",
      "input_type": "list A, A",
      "output_type": "list",
      "signature": "(append (list 1 2 3 4) 5)",
      "description": "The `append` function takes a list and another value with the same entry type,\nand outputs a list of the same type with max_len += 1.",
      "example": "(append (list 1 2 3 4) 5) ;; Returns (1 2 3 4 5)",
      "version": "Clarity1"
    },
    {
      "name": "as-contract",
      "snippet": "as-contract ${1:expr}",
      "input_type": "A",
      "output_type": "A",
      "signature": "(as-contract expr)",
      "description": "The `as-contract` function switches the current context's `tx-sender` value to the _contract's_\nprincipal and executes `expr` with that context. It returns the resulting value of `expr`.",
      "example": "(as-contract tx-sender) ;; Returns S1G2081040G2081040G2081040G208105NK8PE5.docs-test",
      "version": "Clarity1"
    },
    {
      "name": "as-max-len?",
      "snippet": "as-max-len? ${1:sequence} ${2:max-len}",
      "input_type": "sequence_A, uint",
      "output_type": "(optional sequence_A)",
      "signature": "(as-max-len? sequence max_length)",
      "description": "The `as-max-len?` function takes a sequence argument and a uint-valued, literal length argument.\nThe function returns an optional type. If the input sequence length is less than\nor equal to the supplied max_length, this returns `(some sequence)`, otherwise it returns `none`.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`.\n",
      "example": "\n(as-max-len? (list 2 2 2) u3) ;; Returns (some (2 2 2))\n(as-max-len? (list 1 2 3) u2) ;; Returns none\n(as-max-len? \"hello\" u10) ;; Returns (some \"hello\")\n(as-max-len? 0x010203 u10) ;; Returns (some 0x010203)\n",
      "version": "Clarity1"
    },
    {
      "name": "asserts!",
      "snippet": "asserts! ${1:boolean-expr} (err ${2:thrown})",
      "input_type": "bool, C",
      "output_type": "bool",
      "signature": "(asserts! bool-expr thrown-value)",
      "description": "The `asserts!` function admits a boolean argument and asserts its evaluation:\nif bool-expr is `true`, `asserts!` returns `true` and proceeds in the program execution.\nIf the supplied argument is returning a false value, `asserts!` _returns_ `thrown-value` and exits the current\ncontrol-flow.",
      "example": "(asserts! (is-eq 1 1) (err 1)) ;; Returns true",
      "version": "Clarity1"
    },
    {
      "name": "at-block",
      "snippet": "at-block ${1:id-header-hash} ${2:expr}",
      "input_type": "(buff 32), A",
      "output_type": "A",
      "signature": "(at-block id-block-hash expr)",
      "description": "The `at-block` function evaluates the expression `expr` _as if_ it were evaluated at the end of the\nblock indicated by the _block-hash_ argument. The `expr` closure must be read-only.\n\nNote: The block identifying hash must be a hash returned by the `id-header-hash` block information\nproperty. This hash uniquely identifies Stacks blocks and is unique across Stacks forks. While the hash returned by\n`header-hash` is unique within the context of a single fork, it is not unique across Stacks forks.\n\nThe function returns the result of evaluating `expr`.\n",
      "example": "\n(define-data-var data int 1)\n(at-block 0x0000000000000000000000000000000000000000000000000000000000000000 block-height) ;; Returns u0\n(at-block (get-block-info? id-header-hash 0) (var-get data)) ;; Throws NoSuchDataVariable because `data` wasn't initialized at block height 0",
      "version": "Clarity1"
    },
    {
      "name": "begin",
      "snippet": "begin ${1:expr-1} ${2:expr-2}",
      "input_type": "AnyType, ... A",
      "output_type": "A",
      "signature": "(begin expr1 expr2 expr3 ... expr-last)",
      "description": "The `begin` function evaluates each of its input expressions, returning the\nreturn value of the last such expression.\nNote: intermediary statements returning a response type must be checked.",
      "example": "(begin (+ 1 2) 4 5) ;; Returns 5",
      "version": "Clarity1"
    },
    {
      "name": "bit-and",
      "snippet": "bit-and ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(bit-and i1 i2...)",
      "description": "Returns the result of bitwise and'ing a variable number of integer inputs.",
      "example": "(bit-and 24 16) ;; Returns 16\n(bit-and 28 24 -1) ;; Returns 24\n(bit-and u24 u16) ;; Returns u16\n(bit-and -128 -64) ;; Returns -128\n(bit-and 28 24 -1) ;; Returns 24\n",
      "version": "Clarity2"
    },
    {
      "name": "bit-not",
      "snippet": "bit-not ${1:expr-1}",
      "input_type": "int | uint",
      "output_type": "int | uint",
      "signature": "(bit-not i1)",
      "description": "Returns the one's compliement (sometimes also called the bitwise compliment or not operator) of `i1`, effectively reversing the bits in `i1`.\nIn other words, every bit that is `1` in ì1` will be `0` in the result.  Conversely, every bit that is `0` in `i1` will be `1` in the result.\n",
      "example": "(bit-not 3) ;; Returns -4\n(bit-not u128) ;; Returns u340282366920938463463374607431768211327\n(bit-not 128) ;; Returns -129\n(bit-not -128) ;; Returns 127\n",
      "version": "Clarity2"
    },
    {
      "name": "bit-or",
      "snippet": "bit-or ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(bit-or i1 i2...)",
      "description": "Returns the result of bitwise inclusive or'ing a variable number of integer inputs.",
      "example": "(bit-or 4 8) ;; Returns 12\n(bit-or 1 2 4) ;; Returns 7\n(bit-or 64 -32 -16) ;; Returns -16\n(bit-or u2 u4 u32) ;; Returns u38\n",
      "version": "Clarity2"
    },
    {
      "name": "bit-shift-left",
      "snippet": "bit-shift-left ${1:expr-1} ${2:expr-2}",
      "input_type": "int, uint | uint, uint",
      "output_type": "int | uint",
      "signature": "(bit-shift-left i1 shamt)",
      "description": "Shifts all the bits in `i1` to the left by the number of places specified in `shamt` modulo 128 (the bit width of Clarity integers). \n\nNote that there is a deliberate choice made to ignore arithmetic overflow for this operation.  In use cases where overflow should be detected, developers\nshould use `*`, `/`, and `pow` instead of the shift operators.\n",
      "example": "(bit-shift-left 2 u1) ;; Returns 4\n(bit-shift-left 16 u2) ;; Returns 64\n(bit-shift-left -64 u1) ;; Returns -128\n(bit-shift-left u4 u2) ;; Returns u16\n(bit-shift-left 123 u9999999999) ;; Returns -170141183460469231731687303715884105728\n(bit-shift-left u123 u9999999999) ;; Returns u170141183460469231731687303715884105728\n(bit-shift-left -1 u7) ;; Returns -128\n(bit-shift-left -1 u128) ;; Returns -1\n",
      "version": "Clarity2"
    },
    {
      "name": "bit-shift-right",
      "snippet": "bit-shift-right ${1:expr-1} ${2:expr-2}",
      "input_type": "int, uint | uint, uint",
      "output_type": "int | uint",
      "signature": "(bit-shift-right i1 shamt)",
      "description": "Shifts all the bits in `i1` to the right by the number of places specified in `shamt` modulo 128 (the bit width of Clarity integers). \nWhen `i1` is a `uint` (unsigned), new bits are filled with zeros. When `i1` is an `int` (signed), the sign is preserved, meaning that new bits are filled with the value of the previous sign-bit.\n\nNote that there is a deliberate choice made to ignore arithmetic overflow for this operation. In use cases where overflow should be detected, developers should use `*`, `/`, and `pow` instead of the shift operators.\n",
      "example": "(bit-shift-right 2 u1) ;; Returns 1\n(bit-shift-right 128 u2) ;; Returns 32\n(bit-shift-right -64 u1) ;; Returns -32\n(bit-shift-right u128 u2) ;; Returns u32\n(bit-shift-right 123 u9999999999) ;; Returns 0\n(bit-shift-right u123 u9999999999) ;; Returns u0\n(bit-shift-right -128 u7) ;; Returns -1\n(bit-shift-right -256 u1) ;; Returns -128\n(bit-shift-right 5 u2) ;; Returns 1\n(bit-shift-right -5 u2) ;; Returns -2\n",
      "version": "Clarity2"
    },
    {
      "name": "bit-xor",
      "snippet": "bit-xor ${1:expr-1} ${2:expr-2}",
      "input_type": "int, ... | uint, ...",
      "output_type": "int | uint",
      "signature": "(bit-xor i1 i2...)",
      "description": "Returns the result of bitwise exclusive or'ing a variable number of integer inputs.",
      "example": "(bit-xor 1 2) ;; Returns 3\n(bit-xor 120 280) ;; Returns 352\n(bit-xor -128 64) ;; Returns -64\n(bit-xor u24 u4) ;; Returns u28\n(bit-xor 1 2 4 -1) ;; Returns -8\n",
      "version": "Clarity2"
    },
    {
      "name": "buff-to-int-be",
      "snippet": "buff-to-int-be ${1:buff}",
      "input_type": "(buff 16)",
      "output_type": "int",
      "signature": "(buff-to-int-be (buff 16))",
      "description": "Converts a byte buffer to a signed integer use a big-endian encoding.\nThe byte buffer can be up to 16 bytes in length. If there are fewer than 16 bytes, as\nthis function uses a big-endian encoding, the input behaves as if it is\nzero-padded on the _left_.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(buff-to-int-be 0x01) ;; Returns 1\n(buff-to-int-be 0x00000000000000000000000000000001) ;; Returns 1\n(buff-to-int-be 0xffffffffffffffffffffffffffffffff) ;; Returns -1\n(buff-to-int-be 0x) ;; Returns 0\n",
      "version": "Clarity2"
    },
    {
      "name": "buff-to-int-le",
      "snippet": "buff-to-int-le ${1:buff}",
      "input_type": "(buff 16)",
      "output_type": "int",
      "signature": "(buff-to-int-le (buff 16))",
      "description": "Converts a byte buffer to a signed integer use a little-endian encoding.\nThe byte buffer can be up to 16 bytes in length. If there are fewer than 16 bytes, as\nthis function uses a little-endian encoding, the input behaves as if it is\nzero-padded on the _right_.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(buff-to-int-le 0x01) ;; Returns 1\n(buff-to-int-le 0x01000000000000000000000000000000) ;; Returns 1\n(buff-to-int-le 0xffffffffffffffffffffffffffffffff) ;; Returns -1\n(buff-to-int-le 0x) ;; Returns 0\n",
      "version": "Clarity2"
    },
    {
      "name": "buff-to-uint-be",
      "snippet": "buff-to-uint-be ${1:buff}",
      "input_type": "(buff 16)",
      "output_type": "uint",
      "signature": "(buff-to-uint-be (buff 16))",
      "description": "Converts a byte buffer to an unsigned integer use a big-endian encoding.\nThe byte buffer can be up to 16 bytes in length. If there are fewer than 16 bytes, as\nthis function uses a big-endian encoding, the input behaves as if it is\nzero-padded on the _left_.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(buff-to-uint-be 0x01) ;; Returns u1\n(buff-to-uint-be 0x00000000000000000000000000000001) ;; Returns u1\n(buff-to-uint-be 0xffffffffffffffffffffffffffffffff) ;; Returns u340282366920938463463374607431768211455\n(buff-to-uint-be 0x) ;; Returns u0\n",
      "version": "Clarity2"
    },
    {
      "name": "buff-to-uint-le",
      "snippet": "buff-to-uint-le ${1:buff}",
      "input_type": "(buff 16)",
      "output_type": "uint",
      "signature": "(buff-to-uint-le (buff 16))",
      "description": "Converts a byte buffer to an unsigned integer use a little-endian encoding..\nThe byte buffer can be up to 16 bytes in length. If there are fewer than 16 bytes, as\nthis function uses a little-endian encoding, the input behaves as if it is\nzero-padded on the _right_.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(buff-to-uint-le 0x01) ;; Returns u1\n(buff-to-uint-le 0x01000000000000000000000000000000) ;; Returns u1\n(buff-to-uint-le 0xffffffffffffffffffffffffffffffff) ;; Returns u340282366920938463463374607431768211455\n(buff-to-uint-le 0x) ;; Returns u0\n",
      "version": "Clarity2"
    },
    {
      "name": "concat",
      "snippet": "concat ${1:sequence-1} ${2:sequence-2}",
      "input_type": "sequence_A, sequence_A",
      "output_type": "sequence_A",
      "signature": "(concat sequence1 sequence2)",
      "description": "The `concat` function takes two sequences of the same type,\nand returns a concatenated sequence of the same type, with the resulting\nsequence_len = sequence1_len + sequence2_len.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`.\n",
      "example": "\n(concat (list 1 2) (list 3 4)) ;; Returns (1 2 3 4)\n(concat \"hello \" \"world\") ;; Returns \"hello world\"\n(concat 0x0102 0x0304) ;; Returns 0x01020304\n",
      "version": "Clarity1"
    },
    {
      "name": "contract-call?",
      "snippet": "contract-call? ${1:contract-principal} ${2:func} ${3:arg1}",
      "input_type": "ContractName, PublicFunctionName, Arg0, ...",
      "output_type": "(response A B)",
      "signature": "(contract-call? .contract-name function-name arg0 arg1 ...)",
      "description": "The `contract-call?` function executes the given public function of the given contract.\nYou _may not_ use this function to call a public function defined in the current contract. If the public\nfunction returns _err_, any database changes resulting from calling `contract-call?` are aborted.\nIf the function returns _ok_, database changes occurred.",
      "example": "\n;; instantiate the sample-contracts/tokens.clar contract first!\n(as-contract (contract-call? .tokens mint! u19)) ;; Returns (ok u19)",
      "version": "Clarity1"
    },
    {
      "name": "contract-of",
      "snippet": "contract-of ${1:contract-name}",
      "input_type": "Trait",
      "output_type": "principal",
      "signature": "(contract-of .contract-name)",
      "description": "The `contract-of` function returns the principal of the contract implementing the trait.",
      "example": "\n(use-trait token-a-trait 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF.token-a.token-trait)\n(define-public (forward-get-balance (user principal) (contract <token-a-trait>))\n  (begin\n    (ok (contract-of contract)))) ;; returns the principal of the contract implementing <token-a-trait>\n",
      "version": "Clarity1"
    },
    {
      "name": "default-to",
      "snippet": "default-to ${1:default-value} ${2:option-value}",
      "input_type": "A, (optional A)",
      "output_type": "A",
      "signature": "(default-to default-value option-value)",
      "description": "The `default-to` function attempts to 'unpack' the second argument: if the argument is\na `(some ...)` option, it returns the inner value of the option. If the second argument is a `(none)` value,\n`default-to` it returns the value of `default-value`.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(default-to 0 (get id (map-get? names-map (tuple (name \"blockstack\"))))) ;; Returns 1337\n(default-to 0 (get id (map-get? names-map (tuple (name \"non-existant\"))))) ;; Returns 0\n",
      "version": "Clarity1"
    },
    {
      "name": "define-constant",
      "snippet": "define-constant ${1:name} ${2:exprs}",
      "input_type": "MethodSignature, MethodBody",
      "output_type": "Not Applicable",
      "signature": "(define-constant name expression)",
      "description": "`define-constant` is used to define a private constant value in a smart contract.\nThe expression passed into the definition is evaluated at contract launch, in the order that it is\nsupplied in the contract. This can lead to undefined function or undefined variable errors in the\nevent that a function or variable used in the expression has not been defined before the constant.\n\nLike other kinds of definition statements, `define-constant` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n",
      "example": "\n(define-constant four (+ 2 2))\n(+ 4 four) ;; Returns 8\n",
      "version": "Clarity1"
    },
    {
      "name": "define-data-var",
      "snippet": "define-data-var ${1:name} ${2:type} ${3:value}",
      "input_type": "VarName, TypeDefinition, Value",
      "output_type": "Not Applicable",
      "signature": "(define-data-var var-name type value)",
      "description": "`define-data-var` is used to define a new persisted variable for use in a smart contract. Such\nvariable are only modifiable by the current smart contract.\n\nPersisted variable are defined with a type and a value.\n\nLike other kinds of definition statements, `define-data-var` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).",
      "example": "\n(define-data-var size int 0)\n(define-private (set-size (value int))\n  (var-set size value))\n(set-size 1)\n(set-size 2)\n",
      "version": "Clarity1"
    },
    {
      "name": "define-fungible-token",
      "snippet": "define-fungible-token ${1:token-name} ${2:total-supply}",
      "input_type": "TokenName, <uint>",
      "output_type": "Not Applicable",
      "signature": "(define-fungible-token token-name <total-supply>)",
      "description": "`define-fungible-token` is used to define a new fungible token class for use in the current contract.\n\nThe second argument, if supplied, defines the total supply of the fungible token. This ensures that all calls to the `ft-mint?`\nfunction will never be able to create more than `total-supply` tokens. If any such call were to increase the total supply\nof tokens passed that amount, that invocation of `ft-mint?` will result in a runtime error and abort.\n\nLike other kinds of definition statements, `define-fungible-token` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n\nTokens defined using `define-fungible-token` may be used in `ft-transfer?`, `ft-mint?`, and `ft-get-balance` functions",
      "example": "\n(define-fungible-token stacks)\n(define-fungible-token limited-supply-stacks u100)\n",
      "version": "Clarity1"
    },
    {
      "name": "define-map",
      "snippet": "define-map ${1:map-name} { ${2:key-name-1}: ${3:key-type-1} } { ${4:val-name-1}: ${5:vals-type-1} }",
      "input_type": "MapName, TypeDefinition, TypeDefinition",
      "output_type": "Not Applicable",
      "signature": "(define-map map-name key-type value-type)",
      "description": "`define-map` is used to define a new datamap for use in a smart contract. Such\nmaps are only modifiable by the current smart contract.\n\nMaps are defined with a key type and value type, often these types are tuple types.\n\nLike other kinds of definition statements, `define-map` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).",
      "example": "\n(define-map squares { x: int } { square: int })\n(define-private (add-entry (x int))\n  (map-insert squares { x: 2 } { square: (* x x) }))\n(add-entry 1)\n(add-entry 2)\n(add-entry 3)\n(add-entry 4)\n(add-entry 5)\n",
      "version": "Clarity1"
    },
    {
      "name": "define-non-fungible-token",
      "snippet": "define-non-fungible-token ${1:nft-name} ${2:nft-identifier-type}",
      "input_type": "AssetName, TypeSignature",
      "output_type": "Not Applicable",
      "signature": "(define-non-fungible-token asset-name asset-identifier-type)",
      "description": "`define-non-fungible-token` is used to define a new non-fungible token class for use in the current contract.\nIndividual assets are identified by their asset identifier, which must be of the type `asset-identifier-type`. Asset\nidentifiers are _unique_ identifiers.\n\nLike other kinds of definition statements, `define-non-fungible-token` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n\nAssets defined using `define-non-fungible-token` may be used in `nft-transfer?`, `nft-mint?`, and `nft-get-owner?` functions",
      "example": "\n(define-non-fungible-token names (buff 50))\n",
      "version": "Clarity1"
    },
    {
      "name": "define-private",
      "snippet": "define-private (${1:func-name}) ${2:body}",
      "input_type": "MethodSignature, MethodBody",
      "output_type": "Not Applicable",
      "signature": "(define-private (function-name (arg-name-0 arg-type-0) (arg-name-1 arg-type-1) ...) function-body)",
      "description": "`define-private` is used to define _private_ functions for a smart contract. Private\nfunctions may not be called from other smart contracts, nor may they be invoked directly by users.\nInstead, these functions may only be invoked by other functions defined in the same smart contract.\n\nLike other kinds of definition statements, `define-private` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n\nPrivate functions may return any type.",
      "example": "\n(define-private (max-of (i1 int) (i2 int))\n  (if (> i1 i2)\n      i1\n      i2))\n(max-of 4 6) ;; Returns 6\n",
      "version": "Clarity1"
    },
    {
      "name": "define-public",
      "snippet": "define-public (${1:func-name}) ${2:body}",
      "input_type": "MethodSignature, MethodBody",
      "output_type": "Not Applicable",
      "signature": "(define-public (function-name (arg-name-0 arg-type-0) (arg-name-1 arg-type-1) ...) function-body)",
      "description": "`define-public` is used to define a _public_ function and transaction for a smart contract. Public\nfunctions are callable from other smart contracts and may be invoked directly by users by submitting a transaction\nto the Stacks blockchain.\n\nLike other kinds of definition statements, `define-public` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n\nPublic functions _must_ return a ResponseType (using either `ok` or `err`). Any datamap modifications performed by\na public function is aborted if the function returns an `err` type. Public functions may be invoked by other\ncontracts via `contract-call?`.",
      "example": "\n(define-public (hello-world (input int))\n  (begin (print (+ 2 input))\n         (ok input)))\n",
      "version": "Clarity1"
    },
    {
      "name": "define-read-only",
      "snippet": "define-read-only (${1:func-name}) ${2:body}",
      "input_type": "MethodSignature, MethodBody",
      "output_type": "Not Applicable",
      "signature": "(define-read-only (function-name (arg-name-0 arg-type-0) (arg-name-1 arg-type-1) ...) function-body)",
      "description": "`define-read-only` is used to define a _public read-only_ function for a smart contract. Such\nfunctions are callable from other smart contracts.\n\nLike other kinds of definition statements, `define-read-only` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n\nRead-only functions may return any type. However, read-only functions\nmay not perform any datamap modifications, or call any functions which\nperform such modifications. This is enforced both during type checks and during\nthe execution of the function. Public read-only functions may\nbe invoked by other contracts via `contract-call?`.",
      "example": "\n(define-read-only (just-return-one-hundred)\n  (* 10 10))",
      "version": "Clarity1"
    },
    {
      "name": "define-trait",
      "snippet": "define-trait ${1:trait-name} ((${2:func-name} (${3:func-param-types}) (response ${4:ok-type} ${5:err-type})))",
      "input_type": "VarName, [MethodSignature]",
      "output_type": "Not Applicable",
      "signature": "(define-trait trait-name ((func1-name (arg1-type arg2-type ...) (return-type))))",
      "description": "`define-trait` is used to define a new trait definition for use in a smart contract. Other contracts\ncan implement a given trait and then have their contract identifier being passed as a function argument in order to be called\ndynamically with `contract-call?`.\n\nTraits are defined with a name, and a list functions, defined with a name, a list of argument types, and return type.\n\nIn Clarity 1, a trait type can be used to specify the type of a function parameter. A parameter with a trait type can\nbe used as the target of a dynamic `contract-call?`. A principal literal (e.g. `ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.foo`)\nmay be passed as a trait parameter if the specified contract implements all of the functions specified by the trait.\nA trait value (originating from a parameter with trait type) may also be passed as a trait parameter if the types are the same.\n\nBeginning in Clarity 2, a trait can be used in all of the same ways that a built-in type can be used,\nexcept that it cannot be stored in a data var or map, since this would inhibit static analysis.\nThis means that a trait type can be embedded in a compound type (e.g. `(optional <my-trait>)` or `(list 4 <my-trait>)`)\nand a trait value can be bound to a variable in a `let` or `match` expression. In addition to the principal literal\nand trait value with matching type allowed in Clarity 1, Clarity 2 also supports implicit casting from a\ncompatible trait, meaning that a value of type `trait-a` may be passed to a parameter with type `trait-b` if `trait-a`\nincludes all of the requirements of `trait-b` (and optionally additional functions).\n\nLike other kinds of definition statements, `define-trait` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put a define statement in the middle of a function body).\n",
      "example": "\n(define-trait token-trait\n    ((transfer? (principal principal uint) (response uint uint))\n     (get-balance (principal) (response uint uint))))\n",
      "version": "Clarity1"
    },
    {
      "name": "element-at",
      "snippet": "element-at? ${1:sequence} ${2:index}",
      "input_type": "sequence_A, uint",
      "output_type": "(optional A)",
      "signature": "(element-at? sequence index)",
      "description": "The `element-at?` function returns the element at `index` in the provided sequence.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nIn Clarity1, `element-at` must be used (without the `?`). The `?` is added in Clarity2 for consistency -- built-ins that return responses or optionals end in `?`. The Clarity1 spelling is left as an alias in Clarity2 for backwards compatibility.\n",
      "example": "\n(element-at? \"blockstack\" u5) ;; Returns (some \"s\")\n(element-at? (list 1 2 3 4 5) u5) ;; Returns none\n(element-at? (list 1 2 3 4 5) (+ u1 u2)) ;; Returns (some 4)\n(element-at? \"abcd\" u1) ;; Returns (some \"b\")\n(element-at? 0xfb01 u1) ;; Returns (some 0x01)\n",
      "version": "Clarity1"
    },
    {
      "name": "element-at?",
      "snippet": "element-at? ${1:sequence} ${2:index}",
      "input_type": "sequence_A, uint",
      "output_type": "(optional A)",
      "signature": "(element-at? sequence index)",
      "description": "The `element-at?` function returns the element at `index` in the provided sequence.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nIn Clarity1, `element-at` must be used (without the `?`). The `?` is added in Clarity2 for consistency -- built-ins that return responses or optionals end in `?`. The Clarity1 spelling is left as an alias in Clarity2 for backwards compatibility.\n",
      "example": "\n(element-at? \"blockstack\" u5) ;; Returns (some \"s\")\n(element-at? (list 1 2 3 4 5) u5) ;; Returns none\n(element-at? (list 1 2 3 4 5) (+ u1 u2)) ;; Returns (some 4)\n(element-at? \"abcd\" u1) ;; Returns (some \"b\")\n(element-at? 0xfb01 u1) ;; Returns (some 0x01)\n",
      "version": "Clarity2"
    },
    {
      "name": "err",
      "snippet": "err ${1:value}",
      "input_type": "A",
      "output_type": "(response A B)",
      "signature": "(err value)",
      "description": "The `err` function constructs a response type from the input value. Use `err` for\ncreating return values in public functions. An _err_ value indicates that any database changes during\nthe processing of the function should be rolled back.",
      "example": "(err true) ;; Returns (err true)",
      "version": "Clarity1"
    },
    {
      "name": "filter",
      "snippet": "filter ${1:func} ${2:sequence}",
      "input_type": "Function(A) -> bool, sequence_A",
      "output_type": "sequence_A",
      "signature": "(filter func sequence)",
      "description": "The `filter` function applies the input function `func` to each element of the\ninput sequence, and returns the same sequence with any elements removed for which `func` returned `false`.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nThe `func` argument must be a literal function name.\n",
      "example": "\n(filter not (list true false true false)) ;; Returns (false false)\n(define-private (is-a (char (string-utf8 1))) (is-eq char u\"a\"))\n(filter is-a u\"acabd\") ;; Returns u\"aa\"\n(define-private (is-zero (char (buff 1))) (is-eq char 0x00))\n(filter is-zero 0x00010002) ;; Returns 0x0000\n",
      "version": "Clarity1"
    },
    {
      "name": "fold",
      "snippet": "fold ${1:func} ${2:sequence} ${3:initial-value}",
      "input_type": "Function(A, B) -> B, sequence_A, B",
      "output_type": "B",
      "signature": "(fold func sequence_A initial_B)",
      "description": "The `fold` function condenses `sequence_A` into a value of type\n`B` by recursively applies the function `func` to each element of the\ninput sequence _and_ the output of a previous application of `func`.\n\n`fold` uses `initial_B` in the initial application of `func`, along with the\nfirst element of `sequence_A`. The resulting value of type `B` is used for the\nnext application of `func`, along with the next element of `sequence_A` and so\non. `fold` returns the last value of type `B` returned by these successive\napplications `func`.\n\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nThe `func` argument must be a literal function name.\n",
      "example": "\n(fold * (list 2 2 2) 1) ;; Returns 8\n(fold * (list 2 2 2) 0) ;; Returns 0\n;; calculates (- 11 (- 7 (- 3 2)))\n(fold - (list 3 7 11) 2) ;; Returns 5 \n(define-private (concat-string (a (string-ascii 20)) (b (string-ascii 20))) (unwrap-panic (as-max-len? (concat a b) u20)))\n(fold concat-string \"cdef\" \"ab\")   ;; Returns \"fedcab\"\n(fold concat-string (list \"cd\" \"ef\") \"ab\")   ;; Returns \"efcdab\"\n(define-private (concat-buff (a (buff 20)) (b (buff 20))) (unwrap-panic (as-max-len? (concat a b) u20)))\n(fold concat-buff 0x03040506 0x0102)   ;; Returns 0x060504030102\n",
      "version": "Clarity1"
    },
    {
      "name": "from-consensus-buff?",
      "snippet": "from-consensus-buff? ${1:type-signature} ${2:buffer}",
      "input_type": "type-signature(t), buff",
      "output_type": "(optional t)",
      "signature": "(from-consensus-buff? type-signature buffer)",
      "description": "`from-consensus-buff?` is a special function that will deserialize a\nbuffer into a Clarity value, using the SIP-005 serialization of the\nClarity value. The type that `from-consensus-buff?` tries to deserialize\ninto is provided by the first parameter to the function. If it fails\nto deserialize the type, the method returns `none`.\n",
      "example": "\n(from-consensus-buff? int 0x0000000000000000000000000000000001) ;; Returns (some 1)\n(from-consensus-buff? uint 0x0000000000000000000000000000000001) ;; Returns none\n(from-consensus-buff? uint 0x0100000000000000000000000000000001) ;; Returns (some u1)\n(from-consensus-buff? bool 0x0000000000000000000000000000000001) ;; Returns none\n(from-consensus-buff? bool 0x03) ;; Returns (some true)\n(from-consensus-buff? bool 0x04) ;; Returns (some false)\n(from-consensus-buff? principal 0x051fa46ff88886c2ef9762d970b4d2c63678835bd39d) ;; Returns (some SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(from-consensus-buff? { abc: int, def: int } 0x0c00000002036162630000000000000000000000000000000003036465660000000000000000000000000000000004) ;; Returns (some (tuple (abc 3) (def 4)))\n",
      "version": "Clarity2"
    },
    {
      "name": "ft-burn?",
      "snippet": "ft-burn? ${1:asset-name} ${2:amount} ${3:sender}",
      "input_type": "TokenName, uint, principal",
      "output_type": "(response bool uint)",
      "signature": "(ft-burn? token-name amount sender)",
      "description": "`ft-burn?` is used to decrease the token balance for the `sender` principal for a token\ntype defined using `define-fungible-token`. The decreased token balance is _not_ transfered to another principal, but\nrather destroyed, reducing the circulating supply.  \n\nOn a successful burn, it returns `(ok true)`. In the event of an unsuccessful burn it\nreturns one of the following error codes:\n\n`(err u1)` -- `sender` does not have enough balance to burn this amount or the amount specified is not positive\n",
      "example": "\n(define-fungible-token stackaroo)\n(ft-mint? stackaroo u100 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n(ft-burn? stackaroo u50 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n",
      "version": "Clarity1"
    },
    {
      "name": "ft-get-balance",
      "snippet": "ft-get-balance ${1:token-name} ${2:principal}",
      "input_type": "TokenName, principal",
      "output_type": "uint",
      "signature": "(ft-get-balance token-name principal)",
      "description": "`ft-get-balance` returns `token-name` balance of the principal `principal`.\nThe token type must have been defined using `define-fungible-token`.",
      "example": "\n(define-fungible-token stackaroo)\n(ft-mint? stackaroo u100 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(ft-get-balance stackaroo 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR) ;; Returns u100\n",
      "version": "Clarity1"
    },
    {
      "name": "ft-get-supply",
      "snippet": "ft-get-supply ${1:token-name}",
      "input_type": "TokenName",
      "output_type": "uint",
      "signature": "(ft-get-supply token-name)",
      "description": "`ft-get-balance` returns `token-name` circulating supply.\nThe token type must have been defined using `define-fungible-token`.",
      "example": "\n(define-fungible-token stackaroo)\n(ft-mint? stackaroo u100 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(ft-get-supply stackaroo) ;; Returns u100\n",
      "version": "Clarity1"
    },
    {
      "name": "ft-mint?",
      "snippet": "ft-mint? ${1:token-name} ${2:amount} ${3:recipient}",
      "input_type": "TokenName, uint, principal",
      "output_type": "(response bool uint)",
      "signature": "(ft-mint? token-name amount recipient)",
      "description": "`ft-mint?` is used to increase the token balance for the `recipient` principal for a token\ntype defined using `define-fungible-token`. The increased token balance is _not_ transfered from another principal, but\nrather minted.  \n\nIf a non-positive amount is provided to mint, this function returns `(err 1)`. Otherwise, on successfuly mint, it\nreturns `(ok true)`.\n",
      "example": "\n(define-fungible-token stackaroo)\n(ft-mint? stackaroo u100 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n",
      "version": "Clarity1"
    },
    {
      "name": "ft-transfer?",
      "snippet": "ft-transfer? ${1:token-name} ${2:amount} ${3:sender} ${4:recipient}",
      "input_type": "TokenName, uint, principal, principal",
      "output_type": "(response bool uint)",
      "signature": "(ft-transfer? token-name amount sender recipient)",
      "description": "`ft-transfer?` is used to increase the token balance for the `recipient` principal for a token\ntype defined using `define-fungible-token` by debiting the `sender` principal. In contrast to `stx-transfer?`, \nany user can transfer the assets. When used, relevant guards need to be added.\n\nThis function returns (ok true) if the transfer is successful. In the event of an unsuccessful transfer it returns\none of the following error codes:\n\n`(err u1)` -- `sender` does not have enough balance to transfer\n`(err u2)` -- `sender` and `recipient` are the same principal\n`(err u3)` -- amount to send is non-positive\n",
      "example": "\n(define-fungible-token stackaroo)\n(ft-mint? stackaroo u100 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(ft-transfer? stackaroo u50 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n(ft-transfer? stackaroo u60 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (err u1)\n",
      "version": "Clarity1"
    },
    {
      "name": "get",
      "snippet": "get ${1:key-name} ${2:tuple}",
      "input_type": "KeyName, (tuple) | (optional (tuple))",
      "output_type": "A",
      "signature": "(get key-name tuple)",
      "description": "The `get` function fetches the value associated with a given key from the supplied typed tuple.\nIf an `Optional` value is supplied as the inputted tuple, `get` returns an `Optional` type of the specified key in\nthe tuple. If the supplied option is a `(none)` option, get returns `(none)`.",
      "example": "(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-insert names-map { name: \"blockstack\" } { id: 1337 }) ;; Returns true\n(get id (tuple (name \"blockstack\") (id 1337))) ;; Returns 1337\n(get id (map-get? names-map (tuple (name \"blockstack\")))) ;; Returns (some 1337)\n(get id (map-get? names-map (tuple (name \"non-existent\")))) ;; Returns none\n",
      "version": "Clarity1"
    },
    {
      "name": "get-block-info?",
      "snippet": "get-block-info? ${1:prop} ${2:block-height}",
      "input_type": "BlockInfoPropertyName, uint",
      "output_type": "(optional buff) | (optional uint)",
      "signature": "(get-block-info? prop-name block-height)",
      "description": "The `get-block-info?` function fetches data for a block of the given *Stacks* block height. The\nvalue and type returned are determined by the specified `BlockInfoPropertyName`. If the provided `block-height` does\nnot correspond to an existing block prior to the current block, the function returns `none`. The currently available property names\nare as follows:\n\n`burnchain-header-hash`: This property returns a `(buff 32)` value containing the header hash of the burnchain (Bitcoin) block that selected the \nStacks block at the given Stacks chain height.\n\n`id-header-hash`: This property returns a `(buff 32)` value containing the _index block hash_ of a Stacks block.   This hash is globally unique, and is derived\nfrom the block hash and the history of accepted PoX operations.  This is also the block hash value you would pass into `(at-block)`.\n\n`header-hash`: This property returns a `(buff 32)` value containing the header hash of a Stacks block, given a Stacks chain height.  **WARNING* this hash is\nnot guaranteed to be globally unique, since the same Stacks block can be mined in different PoX forks.  If you need global uniqueness, you should use `id-header-hash`.\n\n`miner-address`: This property returns a `principal` value corresponding to the miner of the given block.  **WARNING** In Stacks 2.1, this is not guaranteed to \nbe the same `principal` that received the block reward, since Stacks 2.1 supports coinbase transactions that pay the reward to a contract address.  This is merely\nthe address of the `principal` that produced the block.\n\n`time`: This property returns a `uint` value of the block header time field. This is a Unix epoch timestamp in seconds\nwhich roughly corresponds to when the block was mined. **Note**: this does not increase monotonically with each block\nand block times are accurate only to within two hours. See [BIP113](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki) for more information.\n\nNew in Stacks 2.1:\n\n`block-reward`: This property returns a `uint` value for the total block reward of the indicated Stacks block.  This value is only available once the reward for \nthe block matures.  That is, the latest `block-reward` value available is at least 101 Stacks blocks in the past (on mainnet).  The reward includes the coinbase,\nthe anchored block's transaction fees, and the shares of the confirmed and produced microblock transaction fees earned by this block's miner.  Note that this value may \nbe smaller than the Stacks coinbase at this height, because the miner may have been punished with a valid `PoisonMicroblock` transaction in the event that the miner\npublished two or more microblock stream forks.\n\n`miner-spend-total`: This property returns a `uint` value for the total number of burnchain tokens (i.e. satoshis) spent by all miners trying to win this block.\n\n`miner-spend-winner`: This property returns a `uint` value for the number of burnchain tokens (i.e. satoshis) spent by the winning miner for this Stacks block.  Note that\nthis value is less than or equal to the value for `miner-spend-total` at the same block height.\n",
      "example": "(get-block-info? time u0) ;; Returns (some u1557860301)\n(get-block-info? header-hash u0) ;; Returns (some 0x374708fff7719dd5979ec875d56cd2286f6d3cf7ec317a3b25632aab28ec37bb)\n(get-block-info? vrf-seed u0) ;; Returns (some 0xf490de2920c8a35fabeb13208852aa28c76f9be9b03a4dd2b3c075f7a26923b4)\n",
      "version": "Clarity1"
    },
    {
      "name": "get-burn-block-info?",
      "snippet": "get-burn-block-info? ${1:prop} ${2:block-height}",
      "input_type": "BurnBlockInfoPropertyName, uint",
      "output_type": "(optional buff) | (optional (tuple (addrs (list 2 (tuple (hashbytes (buff 32)) (version (buff 1))))) (payout uint)))",
      "signature": "(get-burn-block-info? prop-name block-height)",
      "description": "The `get-burn-block-info?` function fetches data for a block of the given *burnchain* block height. The\nvalue and type returned are determined by the specified `BlockInfoPropertyName`.  Valid values for `block-height` only\ninclude heights between the burnchain height at the time the Stacks chain was launched, and the last-processed burnchain\nblock.  If the `block-height` argument falls outside of this range, then `none` shall be returned.\n\nThe following `BlockInfoPropertyName` values are defined:\n\n* The `header-hash` property returns a 32-byte buffer representing the header hash of the burnchain block at\nburnchain height `block-height`.\n\n* The `pox-addrs` property returns a tuple with two items: a list of up to two PoX addresses that received a PoX payout at that block height, and the amount of burnchain\ntokens paid to each address (note that per the blockchain consensus rules, each PoX payout will be the same for each address in the block-commit transaction).\nThe list will include burn addresses -- that is, the unspendable addresses that miners pay to when there are no PoX addresses left to be paid.  During the prepare phase,\nthere will be exactly one burn address reported. During the reward phase, up to two burn addresses may be reported in the event that some PoX reward slots are not claimed.\n\nThe `addrs` list contains the same PoX address values passed into the PoX smart contract:\n   * They each have type signature `(tuple (hashbytes (buff 32)) (version (buff 1)))`\n   * The `version` field can be any of the following:\n      * `0x00` means this is a p2pkh address, and `hashbytes` is the 20-byte hash160 of a single public key\n      * `0x01` means this is a p2sh address, and `hashbytes` is the 20-byte hash160 of a redeemScript script\n      * `0x02` means this is a p2wpkh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wpkh witness script\n      * `0x03` means this is a p2wsh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wsh witness script\n      * `0x04` means this is a p2wpkh address, and `hashbytes` is the 20-byte hash160 of the witness script\n      * `0x05` means this is a p2wsh address, and `hashbytes` is the 32-byte sha256 of the witness script\n      * `0x06` means this is a p2tr address, and `hashbytes` is the 32-byte sha256 of the witness script\n",
      "example": "\n(get-burn-block-info? header-hash u677050) ;; Returns (some 0xe67141016c88a7f1203eca0b4312f2ed141531f59303a1c267d7d83ab6b977d8)\n(get-burn-block-info? pox-addrs u677050) ;; Returns (some (tuple (addrs ((tuple (hashbytes 0x395f3643cea07ec4eec73b4d9a973dcce56b9bf1) (version 0x00)) (tuple (hashbytes 0x7c6775e20e3e938d2d7e9d79ac310108ba501ddb) (version 0x01)))) (payout u123)))\n",
      "version": "Clarity2"
    },
    {
      "name": "hash160",
      "snippet": "hash160 ${1:buff}",
      "input_type": "buff|uint|int",
      "output_type": "(buff 20)",
      "signature": "(hash160 value)",
      "description": "The `hash160` function computes `RIPEMD160(SHA256(x))` of the inputted value.\nIf an integer (128 bit) is supplied the hash is computed over the little-endian representation of the\ninteger.",
      "example": "(hash160 0) ;; Returns 0xe4352f72356db555721651aa612e00379167b30f",
      "version": "Clarity1"
    },
    {
      "name": "if",
      "snippet": "if ${1:condition} ${2:expr-if-true} ${3:expr-if-false}",
      "input_type": "bool, A, A",
      "output_type": "A",
      "signature": "(if bool1 expr1 expr2)",
      "description": "The `if` function admits a boolean argument and two expressions\nwhich must return the same type. In the case that the boolean input is `true`, the\n`if` function evaluates and returns `expr1`. If the boolean input is `false`, the\n`if` function evaluates and returns `expr2`.",
      "example": "(if true 1 2) ;; Returns 1\n(if (> 1 2) 1 2) ;; Returns 2",
      "version": "Clarity1"
    },
    {
      "name": "impl-trait",
      "snippet": "impl-trait ${1:trait-identifier}",
      "input_type": "TraitIdentifier",
      "output_type": "Not Applicable",
      "signature": "(impl-trait trait-identifier)",
      "description": "`impl-trait` can be use for asserting that a contract is fully implementing a given trait.\nAdditional checks are being performed when the contract is being published, rejecting the deployment if the\ncontract is violating the trait specification.\n\nTrait identifiers can either be using the sugared syntax (.token-a.token-trait), or be fully qualified\n('SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF.token-a.token-trait).\n\nLike other kinds of definition statements, `impl-trait` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put such a statement in the middle of a function body).\n",
      "example": "\n(impl-trait 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF.token-a.token-trait)\n(define-public (get-balance (account principal))\n  (ok u0))\n(define-public (transfer? (from principal) (to principal) (amount uint))\n  (ok u0))\n",
      "version": "Clarity1"
    },
    {
      "name": "index-of",
      "snippet": "index-of? ${1:sequence} ${2:item}",
      "input_type": "sequence_A, A",
      "output_type": "(optional uint)",
      "signature": "(index-of? sequence item)",
      "description": "The `index-of?` function returns the first index at which `item` can be\nfound, using `is-eq` checks, in the provided sequence.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nIf the target item is not found in the sequence (or if an empty string or buffer is\nsupplied), this function returns `none`.\nIn Clarity1, `index-of` must be used (without the `?`). The `?` is added in Clarity2 for consistency -- built-ins that return responses or optionals end in `?`. The Clarity1 spelling is left as an alias in Clarity2 for backwards compatibility.\n",
      "example": "\n(index-of? \"blockstack\" \"b\") ;; Returns (some u0)\n(index-of? \"blockstack\" \"k\") ;; Returns (some u4)\n(index-of? \"blockstack\" \"\") ;; Returns none\n(index-of? (list 1 2 3 4 5) 6) ;; Returns none\n(index-of? 0xfb01 0x01) ;; Returns (some u1)\n",
      "version": "Clarity1"
    },
    {
      "name": "index-of?",
      "snippet": "index-of? ${1:sequence} ${2:item}",
      "input_type": "sequence_A, A",
      "output_type": "(optional uint)",
      "signature": "(index-of? sequence item)",
      "description": "The `index-of?` function returns the first index at which `item` can be\nfound, using `is-eq` checks, in the provided sequence.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nIf the target item is not found in the sequence (or if an empty string or buffer is\nsupplied), this function returns `none`.\nIn Clarity1, `index-of` must be used (without the `?`). The `?` is added in Clarity2 for consistency -- built-ins that return responses or optionals end in `?`. The Clarity1 spelling is left as an alias in Clarity2 for backwards compatibility.\n",
      "example": "\n(index-of? \"blockstack\" \"b\") ;; Returns (some u0)\n(index-of? \"blockstack\" \"k\") ;; Returns (some u4)\n(index-of? \"blockstack\" \"\") ;; Returns none\n(index-of? (list 1 2 3 4 5) 6) ;; Returns none\n(index-of? 0xfb01 0x01) ;; Returns (some u1)\n",
      "version": "Clarity2"
    },
    {
      "name": "int-to-ascii",
      "snippet": "int-to-ascii ${1:num}",
      "input_type": "int | uint",
      "output_type": "(string-ascii 40)",
      "signature": "(int-to-ascii (int|uint))",
      "description": "Converts an integer, either `int` or `uint`, to a `string-ascii` string-value representation.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(int-to-ascii 1) ;; Returns \"1\"\n(int-to-ascii u1) ;; Returns \"1\"\n(int-to-ascii -1) ;; Returns \"-1\"\n",
      "version": "Clarity2"
    },
    {
      "name": "int-to-utf8",
      "snippet": "int-to-utf8 ${1:num}",
      "input_type": "int | uint",
      "output_type": "(string-utf8 40)",
      "signature": "(int-to-utf8 (int|uint))",
      "description": "Converts an integer, either `int` or `uint`, to a `string-utf8` string-value representation.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(int-to-utf8 1) ;; Returns u\"1\"\n(int-to-utf8 u1) ;; Returns u\"1\"\n(int-to-utf8 -1) ;; Returns u\"-1\"\n",
      "version": "Clarity2"
    },
    {
      "name": "is-eq",
      "snippet": "is-eq ${1:expr-1} ${2:expr-2}",
      "input_type": "A, A, ...",
      "output_type": "bool",
      "signature": "(is-eq v1 v2...)",
      "description": "Compares the inputted values, returning `true` if they are all equal. Note that \n_unlike_ the `(and ...)` function, `(is-eq ...)` will _not_ short-circuit. All values supplied to\nis-eq _must_ be the same type.",
      "example": "(is-eq 1 1) ;; Returns true\n(is-eq true false) ;; Returns false\n(is-eq \"abc\" 234 234) ;; Throws type error\n(is-eq \"abc\" \"abc\") ;; Returns true\n(is-eq 0x0102 0x0102) ;; Returns true\n",
      "version": "Clarity1"
    },
    {
      "name": "is-err",
      "snippet": "is-err ${1:expr}",
      "input_type": "(response A B)",
      "output_type": "bool",
      "signature": "(is-err value)",
      "description": "`is-err` tests a supplied response value, returning `true` if the response was an `err`,\nand `false` if it was an `ok`.",
      "example": "(is-err (ok 1)) ;; Returns false\n(is-err (err 1)) ;; Returns true",
      "version": "Clarity1"
    },
    {
      "name": "is-none",
      "snippet": "is-none ${1:expr}",
      "input_type": "(optional A)",
      "output_type": "bool",
      "signature": "(is-none value)",
      "description": "`is-none` tests a supplied option value, returning `true` if the option value is `(none)`,\nand `false` if it is a `(some ...)`.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(is-none (get id (map-get? names-map { name: \"blockstack\" }))) ;; Returns false\n(is-none (get id (map-get? names-map { name: \"non-existant\" }))) ;; Returns true",
      "version": "Clarity1"
    },
    {
      "name": "is-ok",
      "snippet": "is-ok ${1:expr}",
      "input_type": "(response A B)",
      "output_type": "bool",
      "signature": "(is-ok value)",
      "description": "`is-ok` tests a supplied response value, returning `true` if the response was `ok`,\nand `false` if it was an `err`.",
      "example": "(is-ok (ok 1)) ;; Returns true\n(is-ok (err 1)) ;; Returns false",
      "version": "Clarity1"
    },
    {
      "name": "is-some",
      "snippet": "is-some ${1:expr}",
      "input_type": "(optional A)",
      "output_type": "bool",
      "signature": "(is-some value)",
      "description": "`is-some` tests a supplied option value, returning `true` if the option value is `(some ...)`,\nand `false` if it is a `none`.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(is-some (get id (map-get? names-map { name: \"blockstack\" }))) ;; Returns true\n(is-some (get id (map-get? names-map { name: \"non-existant\" }))) ;; Returns false",
      "version": "Clarity1"
    },
    {
      "name": "is-standard",
      "snippet": "is-standard ${1:principal}",
      "input_type": "principal",
      "output_type": "bool",
      "signature": "(is-standard standard-or-contract-principal)",
      "description": "Tests whether `standard-or-contract-principal` _matches_ the current network\ntype, and therefore represents a principal that can spend tokens on the current\nnetwork type. That is, the network is either of type `mainnet`, or `testnet`.\nOnly `SPxxxx` and `SMxxxx` _c32check form_ addresses can spend tokens on\na mainnet, whereas only `STxxxx` and `SNxxxx` _c32check forms_ addresses can spend\ntokens on a testnet. All addresses can _receive_ tokens, but only principal\n_c32check form_ addresses that match the network type can _spend_ tokens on the\nnetwork.  This method will return `true` if and only if the principal matches\nthe network type, and false otherwise.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(is-standard 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6) ;; returns true on testnet and false on mainnet\n(is-standard 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6.foo) ;; returns true on testnet and false on mainnet\n(is-standard 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY) ;; returns true on mainnet and false on testnet\n(is-standard 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY.foo) ;; returns true on mainnet and false on testnet\n(is-standard 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR) ;; returns false on both mainnet and testnet\n",
      "version": "Clarity2"
    },
    {
      "name": "keccak256",
      "snippet": "keccak256 ${1:buff}",
      "input_type": "buff|uint|int",
      "output_type": "(buff 32)",
      "signature": "(keccak256 value)",
      "description": "The `keccak256` function computes `KECCAK256(value)` of the inputted value.\nNote that this differs from the `NIST SHA-3` (that is, FIPS 202) standard. If an integer (128 bit)\nis supplied the hash is computed over the little-endian representation of the integer.",
      "example": "(keccak256 0) ;; Returns 0xf490de2920c8a35fabeb13208852aa28c76f9be9b03a4dd2b3c075f7a26923b4",
      "version": "Clarity1"
    },
    {
      "name": "len",
      "snippet": "len ${1:sequence}",
      "input_type": "sequence_A",
      "output_type": "uint",
      "signature": "(len sequence)",
      "description": "The `len` function returns the length of a given sequence.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`.\n    ",
      "example": "\n(len \"blockstack\") ;; Returns u10\n(len (list 1 2 3 4 5)) ;; Returns u5\n(len 0x010203) ;; Returns u3\n",
      "version": "Clarity1"
    },
    {
      "name": "let",
      "snippet": "let ((${1:name-1} ${2:val-1})) ${3:expr-1}",
      "input_type": "((name1 AnyType) (name2 AnyType) ...), AnyType, ... A",
      "output_type": "A",
      "signature": "(let ((name1 expr1) (name2 expr2) ...) expr-body1 expr-body2 ... expr-body-last)",
      "description": "The `let` function accepts a list of `variable name` and `expression` pairs,\nevaluating each expression and _binding_ it to the corresponding variable name.\n`let` bindings are sequential: when a `let` binding is evaluated, it may refer to prior binding.\nThe _context_ created by this set of bindings is used for evaluating its body expressions.\n The let expression returns the value of the last such body expression.\nNote: intermediary statements returning a response type must be checked",
      "example": "(let ((a 2) (b (+ 5 6 7))) (print a) (print b) (+ a b)) ;; Returns 20\n(let ((a 5) (c (+ a 1)) (d (+ c 1)) (b (+ a c d))) (print a) (print b) (+ a b)) ;; Returns 23",
      "version": "Clarity1"
    },
    {
      "name": "list",
      "snippet": "list ${1:expr-1} ${2:expr-2}",
      "input_type": "A, ...",
      "output_type": "(list A)",
      "signature": "(list expr1 expr2 expr3 ...)",
      "description": "The `list` function constructs a list composed of the inputted values. Each\nsupplied value must be of the same type.",
      "example": "(list (+ 1 2) 4 5) ;; Returns (3 4 5)",
      "version": "Clarity1"
    },
    {
      "name": "log2",
      "snippet": "log2 ${1:expr-1}",
      "input_type": "int | uint",
      "output_type": "int | uint",
      "signature": "(log2 n)",
      "description": "Returns the power to which the number 2 must be raised to to obtain the value `n`, rounded \ndown to the nearest integer. Fails on a negative numbers.\n",
      "example": "(log2 u8) ;; Returns u3\n(log2 8) ;; Returns 3\n(log2 u1) ;; Returns u0\n(log2 1000) ;; Returns 9\n",
      "version": "Clarity1"
    },
    {
      "name": "map",
      "snippet": "map ${1:func} ${2:sequence}",
      "input_type": "Function(A, B, ..., N) -> X, sequence_A, sequence_B, ..., sequence_N",
      "output_type": "(list X)",
      "signature": "(map func sequence_A sequence_B ... sequence_N)",
      "description": "The `map` function applies the function `func` to each corresponding element of the input sequences,\nand outputs a _list_ of the same type containing the outputs from those function applications.\nApplicable sequence types are `(list A)`, `buff`, `string-ascii` and `string-utf8`,\nfor which the corresponding element types are, respectively, `A`, `(buff 1)`, `(string-ascii 1)` and `(string-utf8 1)`.\nThe `func` argument must be a literal function name.\nAlso, note that, no matter what kind of sequences the inputs are, the output is always a list.",
      "example": "\n(map not (list true false true false)) ;; Returns (false true false true)\n(map + (list 1 2 3) (list 1 2 3) (list 1 2 3)) ;; Returns (3 6 9)\n(define-private (a-or-b (char (string-utf8 1))) (if (is-eq char u\"a\") u\"a\" u\"b\"))\n(map a-or-b u\"aca\") ;; Returns (u\"a\" u\"b\" u\"a\")\n(define-private (zero-or-one (char (buff 1))) (if (is-eq char 0x00) 0x00 0x01))\n(map zero-or-one 0x000102) ;; Returns (0x00 0x01 0x01)\n",
      "version": "Clarity1"
    },
    {
      "name": "map-delete",
      "snippet": "map-delete ${1:map-name} ${2:key-tuple}",
      "input_type": "MapName, tuple",
      "output_type": "bool",
      "signature": "(map-delete map-name key-tuple)",
      "description": "The `map-delete` function removes the value associated with the input key for\nthe given map. If an item exists and is removed, the function returns `true`.\nIf a value did not exist for this key in the data map, the function returns `false`.",
      "example": "(define-map names-map { name: (string-ascii 10) } { id: int })\n(map-insert names-map { name: \"blockstack\" } { id: 1337 }) ;; Returns true\n(map-delete names-map { name: \"blockstack\" }) ;; Returns true\n(map-delete names-map { name: \"blockstack\" }) ;; Returns false\n(map-delete names-map (tuple (name \"blockstack\"))) ;; Same command, using a shorthand for constructing the tuple\n",
      "version": "Clarity1"
    },
    {
      "name": "map-get?",
      "snippet": "map-get? ${1:map-name} ${2:key-tuple}",
      "input_type": "MapName, tuple",
      "output_type": "(optional (tuple))",
      "signature": "(map-get? map-name key-tuple)",
      "description": "The `map-get?` function looks up and returns an entry from a contract's data map.\nThe value is looked up using `key-tuple`.\nIf there is no value associated with that key in the data map, the function returns a `none` option. Otherwise,\nit returns `(some value)`.",
      "example": "(define-map names-map { name: (string-ascii 10) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(map-get? names-map (tuple (name \"blockstack\"))) ;; Returns (some (tuple (id 1337)))\n(map-get? names-map { name: \"blockstack\" }) ;; Same command, using a shorthand for constructing the tuple\n",
      "version": "Clarity1"
    },
    {
      "name": "map-insert",
      "snippet": "map-insert ${1:map-name} ${2:key-tuple} ${3:value-tuple}",
      "input_type": "MapName, tuple_A, tuple_B",
      "output_type": "bool",
      "signature": "(map-insert map-name key-tuple value-tuple)",
      "description": "The `map-insert` function sets the value associated with the input key to the\ninputted value if and only if there is not already a value associated with the key in the map.\nIf an insert occurs, the function returns `true`. If a value already existed for\nthis key in the data map, the function returns `false`.\n\nNote: the `value-tuple` requires 1 additional byte for storage in the materialized blockchain state,\nand therefore the maximum size of a value that may be inserted into a map is MAX_CLARITY_VALUE - 1.",
      "example": "(define-map names-map { name: (string-ascii 10) } { id: int })\n(map-insert names-map { name: \"blockstack\" } { id: 1337 }) ;; Returns true\n(map-insert names-map { name: \"blockstack\" } { id: 1337 }) ;; Returns false\n(map-insert names-map (tuple (name \"blockstack\")) (tuple (id 1337))) ;; Same command, using a shorthand for constructing the tuple\n",
      "version": "Clarity1"
    },
    {
      "name": "map-set",
      "snippet": "map-set ${1:map-name} ${2:key-tuple} ${3:value-tuple}",
      "input_type": "MapName, tuple_A, tuple_B",
      "output_type": "bool",
      "signature": "(map-set map-name key-tuple value-tuple)",
      "description": "The `map-set` function sets the value associated with the input key to the\ninputted value. This function performs a _blind_ update; whether or not a value is already associated\nwith the key, the function overwrites that existing association.\n\nNote: the `value-tuple` requires 1 additional byte for storage in the materialized blockchain state,\nand therefore the maximum size of a value that may be inserted into a map is MAX_CLARITY_VALUE - 1.",
      "example": "(define-map names-map { name: (string-ascii 10) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 }) ;; Returns true\n(map-set names-map (tuple (name \"blockstack\")) (tuple (id 1337))) ;; Same command, using a shorthand for constructing the tuple\n",
      "version": "Clarity1"
    },
    {
      "name": "match",
      "snippet": "match ${1:algebraic-expr} ${2:some-binding-name} ${3:some-branch} ${4:none-branch}",
      "input_type": "(optional A) name expression expression | (response A B) name expression name expression",
      "output_type": "C",
      "signature": "(match opt-input some-binding-name some-branch none-branch) |\n(match-resp input ok-binding-name ok-branch err-binding-name err-branch)",
      "description": "The `match` function is used to test and destructure optional and response types.\n\nIf the `input` is an optional, it tests whether the provided\n`input` is a `some` or `none` option, and evaluates `some-branch` or\n`none-branch` in each respective case.\n\nWithin the `some-branch`, the _contained value_ of the `input`\nargument is bound to the provided `some-binding-name` name.\n\nOnly _one_ of the branches will be evaluated (similar to `if` statements).\n\nIf the `input` is a response, it tests whether the provided `input` is\nan `ok` or `err` response type, and evaluates `ok-branch` or\n`err-branch` in each respective case.\n\nWithin the `ok-branch`, the _contained ok value_ of the `input`\nargument is bound to the provided `ok-binding-name` name.\n\nWithin the `err-branch`, the _contained err value_ of the `input`\nargument is bound to the provided `err-binding-name` name.\n\nOnly _one_ of the branches will be evaluated (similar to `if` statements).\n\nNote: Type checking requires that the type of both the ok and err parts of the\nresponse object be determinable. For situations in which one of the parts of a response\nis untyped, you should use `unwrap-panic` or `unwrap-err-panic` instead of `match`.",
      "example": "\n(define-private (add-10 (x (optional int)))\n  (match x\n  value (+ 10 value)\n  10))\n(add-10 (some 5)) ;; Returns 15\n(add-10 none) ;; Returns 10\n\n(define-private (add-or-pass-err (x (response int (string-ascii 10))) (to-add int))\n  (match x\n   value (ok (+ to-add value))\n   err-value (err err-value)))\n(add-or-pass-err (ok 5) 20) ;; Returns (ok 25)\n(add-or-pass-err (err \"ERROR\") 20) ;; Returns (err \"ERROR\")\n",
      "version": "Clarity1"
    },
    {
      "name": "merge",
      "snippet": "merge ${1:tuple-1} ${2:tuple-2}",
      "input_type": "tuple, tuple",
      "output_type": "tuple",
      "signature": "(merge tuple { key1: val1 })",
      "description": "The `merge` function returns a new tuple with the combined fields, without mutating the supplied tuples.",
      "example": "(define-map users { id: int } { name: (string-ascii 12), address: (optional principal) })\n(map-insert users { id: 1337 } { name: \"john\", address: none }) ;; Returns true\n(let ((user (unwrap-panic (map-get? users { id: 1337 }))))\n    (merge user { address: (some 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) })) ;; Returns (tuple (address (some SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF)) (name \"john\"))",
      "version": "Clarity1"
    },
    {
      "name": "mod",
      "snippet": "mod ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "int | uint",
      "signature": "(mod i1 i2)",
      "description": "Returns the integer remainder from integer dividing `i1` by `i2`. In the event of a division by zero, throws a runtime error.",
      "example": "(mod 2 3) ;; Returns 2\n(mod 5 2) ;; Returns 1\n(mod 7 1) ;; Returns 0\n",
      "version": "Clarity1"
    },
    {
      "name": "nft-burn?",
      "snippet": "nft-burn? ${1:asset-name} ${2:asset-identifier} ${3:sender}",
      "input_type": "AssetName, A, principal",
      "output_type": "(response bool uint)",
      "signature": "(nft-burn? asset-class asset-identifier sender)",
      "description": "`nft-burn?` is used to burn an asset that the `sender` principal owns.\nThe asset must have been defined using `define-non-fungible-token`, and the supplied \n`asset-identifier` must be of the same type specified in that definition.\n\nOn a successful burn, it returns `(ok true)`. In the event of an unsuccessful burn it\nreturns one of the following error codes:\n\n`(err u1)` -- `sender` does not own the specified asset\n`(err u3)` -- the asset specified by `asset-identifier` does not exist\n",
      "example": "\n(define-non-fungible-token stackaroo (string-ascii 40))\n(nft-mint? stackaroo \"Roo\" 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n(nft-burn? stackaroo \"Roo\" 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n",
      "version": "Clarity1"
    },
    {
      "name": "nft-get-owner?",
      "snippet": "nft-get-owner? ${1:asset-name} ${2:asset-identifier}",
      "input_type": "AssetName, A",
      "output_type": "(optional principal)",
      "signature": "(nft-get-owner? asset-class asset-identifier)",
      "description": "`nft-get-owner?` returns the owner of an asset, identified by `asset-identifier`, or `none` if the asset does not exist.\nThe asset type must have been defined using `define-non-fungible-token`, and the supplied `asset-identifier` must be of the same type specified in\nthat definition.",
      "example": "\n(define-non-fungible-token stackaroo (string-ascii 40))\n(nft-mint? stackaroo \"Roo\" 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF)\n(nft-get-owner? stackaroo \"Roo\") ;; Returns (some SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF)\n(nft-get-owner? stackaroo \"Too\") ;; Returns none\n",
      "version": "Clarity1"
    },
    {
      "name": "nft-mint?",
      "snippet": "nft-mint? ${1:asset-name} ${2:asset-identifier} ${3:recipient}",
      "input_type": "AssetName, A, principal",
      "output_type": "(response bool uint)",
      "signature": "(nft-mint? asset-class asset-identifier recipient)",
      "description": "`nft-mint?` is used to instantiate an asset and set that asset's owner to the `recipient` principal.\nThe asset must have been defined using `define-non-fungible-token`, and the supplied `asset-identifier` must be of the same type specified in\nthat definition.\n\nIf an asset identified by `asset-identifier` _already exists_, this function will return an error with the following error code:\n\n`(err u1)`\n\nOtherwise, on successfuly mint, it returns `(ok true)`.\n",
      "example": "\n(define-non-fungible-token stackaroo (string-ascii 40))\n(nft-mint? stackaroo \"Roo\" 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n",
      "version": "Clarity1"
    },
    {
      "name": "nft-transfer?",
      "snippet": "nft-transfer? ${1:asset-name} ${2:asset-identifier} ${3:sender} ${4:recipient}",
      "input_type": "AssetName, A, principal, principal",
      "output_type": "(response bool uint)",
      "signature": "(nft-transfer? asset-class asset-identifier sender recipient)",
      "description": "`nft-transfer?` is used to change the owner of an asset identified by `asset-identifier`\nfrom `sender` to `recipient`. The `asset-class` must have been defined by `define-non-fungible-token` and `asset-identifier`\nmust be of the type specified in that definition. In contrast to `stx-transfer?`, any user can transfer the asset. \nWhen used, relevant guards need to be added.\n\nThis function returns (ok true) if the transfer is successful. In the event of an unsuccessful transfer it returns\none of the following error codes:\n\n`(err u1)` -- `sender` does not own the asset\n`(err u2)` -- `sender` and `recipient` are the same principal\n`(err u3)` -- asset identified by asset-identifier does not exist\n",
      "example": "\n(define-non-fungible-token stackaroo (string-ascii 40))\n(nft-mint? stackaroo \"Roo\" 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)\n(nft-transfer? stackaroo \"Roo\" 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (ok true)\n(nft-transfer? stackaroo \"Roo\" 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (err u1)\n(nft-transfer? stackaroo \"Stacka\" 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF) ;; Returns (err u3)\n",
      "version": "Clarity1"
    },
    {
      "name": "not",
      "snippet": "not ${1:expr-1}",
      "input_type": "bool",
      "output_type": "bool",
      "signature": "(not b1)",
      "description": "Returns the inverse of the boolean input.",
      "example": "(not true) ;; Returns false\n(not (is-eq 1 2)) ;; Returns true\n",
      "version": "Clarity1"
    },
    {
      "name": "ok",
      "snippet": "ok ${1:value}",
      "input_type": "A",
      "output_type": "(response A B)",
      "signature": "(ok value)",
      "description": "The `ok` function constructs a response type from the input value. Use `ok` for\ncreating return values in public functions. An _ok_ value indicates that any database changes during\nthe processing of the function should materialize.",
      "example": "(ok 1) ;; Returns (ok 1)",
      "version": "Clarity1"
    },
    {
      "name": "or",
      "snippet": "or ${1:expr-1} ${2:expr-2}",
      "input_type": "bool, ...",
      "output_type": "bool",
      "signature": "(or b1 b2 ...)",
      "description": "Returns `true` if any boolean inputs are `true`. Importantly, the supplied arguments are \nevaluated in-order and lazily. Lazy evaluation means that if one of the arguments returns `true`, the function \nshort-circuits, and no subsequent arguments are evaluated.",
      "example": "(or true false) ;; Returns true\n(or (is-eq (+ 1 2) 1) (is-eq 4 4)) ;; Returns true\n(or (is-eq (+ 1 2) 1) (is-eq 3 4)) ;; Returns false\n(or (is-eq (+ 1 2) 3) (is-eq 4 4)) ;; Returns true\n",
      "version": "Clarity1"
    },
    {
      "name": "pow",
      "snippet": "pow ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "int | uint",
      "signature": "(pow i1 i2)",
      "description": "Returns the result of raising `i1` to the power of `i2`. In the event of an _overflow_, throws a runtime error.\nNote: Corner cases are handled with the following rules:\n  * if both `i1` and `i2` are `0`, return `1`\n  * if `i1` is `1`, return `1`\n  * if `i1` is `0`, return `0`\n  * if `i2` is `1`, return `i1`\n  * if `i2` is negative or greater than `u32::MAX`, throw a runtime error",
      "example": "(pow 2 3) ;; Returns 8\n(pow 2 2) ;; Returns 4\n(pow 7 1) ;; Returns 7\n",
      "version": "Clarity1"
    },
    {
      "name": "principal-construct?",
      "snippet": "principal-construct? ${1:version} ${2:pub-key-hash}",
      "input_type": "(buff 1), (buff 20), [(string-ascii 40)]",
      "output_type": "(response principal { error_code: uint, principal: (option principal) })",
      "signature": "(principal-construct? (buff 1) (buff 20) [(string-ascii 40)])",
      "description": "A principal value represents either a set of keys, or a smart contract.\nThe former, called a _standard principal_,\nis encoded as a `(buff 1)` *version byte*, indicating the type of account\nand the type of network that this principal can spend tokens on,\nand a `(buff 20)` *public key hash*, characterizing the principal's unique identity.\nThe latter, a _contract principal_, is encoded as a standard principal concatenated with\na `(string-ascii 40)` *contract name* that identifies the code body.\n\nThe `principal-construct?` function allows users to create either standard or contract principals,\ndepending on which form is used.  To create a standard principal, \n`principal-construct?` would be called with two arguments: it\ntakes as input a `(buff 1)` which encodes the principal address's\n`version-byte`, a `(buff 20)` which encodes the principal address's `hash-bytes`.\nTo create a contract principal, `principal-construct?` would be called with\nthree arguments: the `(buff 1)` and `(buff 20)` to represent the standard principal\nthat created the contract, and a `(string-ascii 40)` which encodes the contract's name.\nOn success, this function returns either a standard principal or contract principal, \ndepending on whether or not the third `(string-ascii 40)` argument is given.\n\nThis function returns a `Response`. On success, the `ok` value is a `Principal`.\nThe `err` value is a value tuple with the form `{ error_code: uint, value: (optional principal) }`.\n\nIf the single-byte `version-byte` is in the valid range `0x00` to `0x1f`, but is not an appropriate\nversion byte for the current network, then the error will be `u0`, and `value` will contain\n`(some principal)`, where the wrapped value is the principal.  If the `version-byte` is not in this range, \nhowever, then the `value` will be `none`.\n\nIf the `version-byte` is a `buff` of length 0, if the single-byte `version-byte` is a\nvalue greater than `0x1f`, or the `hash-bytes` is a `buff` of length not equal to 20, then `error_code`\nwill be `u1` and `value` will be `None`.\n\nIf a name is given, and the name is either an empty string or contains ASCII characters\nthat are not allowed in contract names, then `error_code` will be `u2`.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(principal-construct? 0x1a 0xfa6bf38ed557fe417333710d6033e9419391a320) ;; Returns (ok ST3X6QWWETNBZWGBK6DRGTR1KX50S74D3425Q1TPK)\n(principal-construct? 0x1a 0xfa6bf38ed557fe417333710d6033e9419391a320 \"foo\") ;; Returns (ok ST3X6QWWETNBZWGBK6DRGTR1KX50S74D3425Q1TPK.foo)\n(principal-construct? 0x16 0xfa6bf38ed557fe417333710d6033e9419391a320) ;; Returns (err (tuple (error_code u0) (value (some SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY))))\n(principal-construct? 0x16 0xfa6bf38ed557fe417333710d6033e9419391a320 \"foo\") ;; Returns (err (tuple (error_code u0) (value (some SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY.foo))))\n(principal-construct? 0x   0xfa6bf38ed557fe417333710d6033e9419391a320) ;; Returns (err (tuple (error_code u1) (value none)))\n(principal-construct? 0x16 0xfa6bf38ed557fe417333710d6033e9419391a3)   ;; Returns (err (tuple (error_code u1) (value none)))\n(principal-construct? 0x20 0xfa6bf38ed557fe417333710d6033e9419391a320) ;; Returns (err (tuple (error_code u1) (value none)))\n(principal-construct? 0x1a 0xfa6bf38ed557fe417333710d6033e9419391a320 \"\") ;; Returns (err (tuple (error_code u2) (value none)))\n(principal-construct? 0x1a 0xfa6bf38ed557fe417333710d6033e9419391a320 \"foo[\") ;; Returns (err (tuple (error_code u2) (value none)))\n",
      "version": "Clarity2"
    },
    {
      "name": "principal-destruct?",
      "snippet": "principal-destruct? ${1:principal-address}",
      "input_type": "principal",
      "output_type": "(response (tuple (hash-bytes (buff 20)) (name (optional (string-ascii 40))) (version (buff 1))) (tuple (hash-bytes (buff 20)) (name (optional (string-ascii 40))) (version (buff 1))))",
      "signature": "(principal-destruct? principal-address)",
      "description": "A principal value represents either a set of keys, or a smart contract.\nThe former, called a _standard principal_,\nis encoded as a `(buff 1)` *version byte*, indicating the type of account\nand the type of network that this principal can spend tokens on,\nand a `(buff 20)` *public key hash*, characterizing the principal's unique identity.\nThe latter, a _contract principal_, is encoded as a standard principal concatenated with\na `(string-ascii 40)` *contract name* that identifies the code body.\n\n`principal-destruct?` will decompose a principal into its component parts: either`{version-byte, hash-bytes}`\nfor standard principals, or `{version-byte, hash-bytes, name}` for contract principals.\n\nThis method returns a `Response` that wraps this data as a tuple.\n\nIf the version byte of `principal-address` matches the network (see `is-standard`), then this method\nreturns the pair as its `ok` value.\n\nIf the version byte of `principal-address` does not match the network, then this method\nreturns the pair as its `err` value.\n\nIn both cases, the value itself is a tuple containing three fields: a `version` value as a `(buff 1)`,\na `hash-bytes` value as a `(buff 20)`, and a `name` value as an `(optional (string-ascii 40))`.  The `name`\nfield will only be `(some ..)` if the principal is a contract principal.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(principal-destruct? 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6) ;; Returns (ok (tuple (hash-bytes 0x164247d6f2b425ac5771423ae6c80c754f7172b0) (name none) (version 0x1a)))\n(principal-destruct? 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6.foo) ;; Returns (ok (tuple (hash-bytes 0x164247d6f2b425ac5771423ae6c80c754f7172b0) (name (some \"foo\")) (version 0x1a)))\n(principal-destruct? 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY) ;; Returns (err (tuple (hash-bytes 0xfa6bf38ed557fe417333710d6033e9419391a320) (name none) (version 0x16)))\n(principal-destruct? 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY.foo) ;; Returns (err (tuple (hash-bytes 0xfa6bf38ed557fe417333710d6033e9419391a320) (name (some \"foo\")) (version 0x16)))\n",
      "version": "Clarity2"
    },
    {
      "name": "principal-of?",
      "snippet": "principal-of? ${1:public-key}",
      "input_type": "(buff 33)",
      "output_type": "(response principal uint)",
      "signature": "(principal-of? public-key)",
      "description": "The `principal-of?` function returns the principal derived from the provided public key.\n    If the `public-key` is invalid, it will return the error code `(err u1).`.\n\nNote: Before Stacks 2.1, this function has a bug, in that the principal returned would always\nbe a testnet single-signature principal, even if the function were run on the mainnet. Starting\nwith Stacks 2.1, this bug is fixed, so that this function will return a principal suited to\nthe network it is called on. In particular, if this is called on the mainnet, it will\nreturn a single-signature mainnet principal.\n    ",
      "example": "(principal-of? 0x03adb8de4bfb65db2cfd6120d55c6526ae9c52e675db7e47308636534ba7786110) ;; Returns (ok ST1AW6EKPGT61SQ9FNVDS17RKNWT8ZP582VF9HSCP)",
      "version": "Clarity1"
    },
    {
      "name": "print",
      "snippet": "print ${1:expr}",
      "input_type": "A",
      "output_type": "A",
      "signature": "(print expr)",
      "description": "The `print` function evaluates and returns its input expression. On Stacks Core\nnodes configured for development (as opposed to production mining nodes), this function prints the resulting value to `STDOUT` (standard output).",
      "example": "(print (+ 1 2 3)) ;; Returns 6",
      "version": "Clarity1"
    },
    {
      "name": "replace-at?",
      "snippet": "replace-at? ${1:sequence} ${2:index} ${3:element}",
      "input_type": "sequence_A, uint, A",
      "output_type": "(optional sequence_A)",
      "signature": "(replace-at? sequence index element)",
      "description": "The `replace-at?` function takes in a sequence, an index, and an element,\nand returns a new sequence with the data at the index position replaced with the given element. \nThe given element's type must match the type of the sequence, and must correspond to a single \nindex of the input sequence. The return type on success is the same type as the input sequence.\n\nIf the provided index is out of bounds, this functions returns `none`.\n",
      "example": "\n(replace-at? u\"ab\" u1 u\"c\") ;; Returns (some u\"ac\")\n(replace-at? 0x00112233 u2 0x44) ;; Returns (some 0x00114433)\n(replace-at? \"abcd\" u3 \"e\") ;; Returns (some \"abce\")\n(replace-at? (list 1) u0 10) ;; Returns (some (10))\n(replace-at? (list (list 1) (list 2)) u0 (list 33)) ;; Returns (some ((33) (2)))\n(replace-at? (list 1 2) u3 4) ;; Returns none\n",
      "version": "Clarity2"
    },
    {
      "name": "secp256k1-recover?",
      "snippet": "secp256k1-recover? ${1:message-hash} ${2:signature}",
      "input_type": "(buff 32), (buff 65)",
      "output_type": "(response (buff 33) uint)",
      "signature": "(secp256k1-recover? message-hash signature)",
      "description": "The `secp256k1-recover?` function recovers the public key used to sign the message  which sha256 is `message-hash`\n    with the provided `signature`.\n    If the signature does not match, it will return the error code `(err u1).`.\n    If the signature is invalid, it will return the error code `(err u2).`.\n    The signature includes 64 bytes plus an additional recovery id (00..03) for a total of 65 bytes.",
      "example": "(secp256k1-recover? 0xde5b9eb9e7c5592930eb2e30a01369c36586d872082ed8181ee83d2a0ec20f04\n 0x8738487ebe69b93d8e51583be8eee50bb4213fc49c767d329632730cc193b873554428fc936ca3569afc15f1c9365f6591d6251a89fee9c9ac661116824d3a1301)\n ;; Returns (ok 0x03adb8de4bfb65db2cfd6120d55c6526ae9c52e675db7e47308636534ba7786110)",
      "version": "Clarity1"
    },
    {
      "name": "secp256k1-verify",
      "snippet": "secp256k1-verify ${1:message-hash} ${2:signature} ${3:public-key})",
      "input_type": "(buff 32), (buff 64) | (buff 65), (buff 33)",
      "output_type": "bool",
      "signature": "(secp256k1-verify message-hash signature public-key)",
      "description": "The `secp256k1-verify` function verifies that the provided signature of the message-hash\nwas signed with the private key that generated the public key.\nThe `message-hash` is the `sha256` of the message.\nThe signature includes 64 bytes plus an optional additional recovery id (00..03) for a total of 64 or 65 bytes.",
      "example": "(secp256k1-verify 0xde5b9eb9e7c5592930eb2e30a01369c36586d872082ed8181ee83d2a0ec20f04\n 0x8738487ebe69b93d8e51583be8eee50bb4213fc49c767d329632730cc193b873554428fc936ca3569afc15f1c9365f6591d6251a89fee9c9ac661116824d3a1301\n 0x03adb8de4bfb65db2cfd6120d55c6526ae9c52e675db7e47308636534ba7786110) ;; Returns true\n(secp256k1-verify 0xde5b9eb9e7c5592930eb2e30a01369c36586d872082ed8181ee83d2a0ec20f04\n 0x8738487ebe69b93d8e51583be8eee50bb4213fc49c767d329632730cc193b873554428fc936ca3569afc15f1c9365f6591d6251a89fee9c9ac661116824d3a13\n 0x03adb8de4bfb65db2cfd6120d55c6526ae9c52e675db7e47308636534ba7786110) ;; Returns true\n(secp256k1-verify 0x0000000000000000000000000000000000000000000000000000000000000000\n 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n 0x03adb8de4bfb65db2cfd6120d55c6526ae9c52e675db7e47308636534ba7786110) ;; Returns false",
      "version": "Clarity1"
    },
    {
      "name": "sha256",
      "snippet": "sha256 ${1:buff}",
      "input_type": "buff|uint|int",
      "output_type": "(buff 32)",
      "signature": "(sha256 value)",
      "description": "The `sha256` function computes `SHA256(x)` of the inputted value.\nIf an integer (128 bit) is supplied the hash is computed over the little-endian representation of the\ninteger.",
      "example": "(sha256 0) ;; Returns 0x374708fff7719dd5979ec875d56cd2286f6d3cf7ec317a3b25632aab28ec37bb",
      "version": "Clarity1"
    },
    {
      "name": "sha512",
      "snippet": "sha512 ${1:buff}",
      "input_type": "buff|uint|int",
      "output_type": "(buff 64)",
      "signature": "(sha512 value)",
      "description": "The `sha512` function computes `SHA512(x)` of the inputted value.\nIf an integer (128 bit) is supplied the hash is computed over the little-endian representation of the\ninteger.",
      "example": "(sha512 1) ;; Returns 0x6fcee9a7b7a7b821d241c03c82377928bc6882e7a08c78a4221199bfa220cdc55212273018ee613317c8293bb8d1ce08d1e017508e94e06ab85a734c99c7cc34",
      "version": "Clarity1"
    },
    {
      "name": "sha512/256",
      "snippet": "sha512/256 ${1:buff}",
      "input_type": "buff|uint|int",
      "output_type": "(buff 32)",
      "signature": "(sha512/256 value)",
      "description": "The `sha512/256` function computes `SHA512/256(x)` (the SHA512 algorithm with the 512/256 initialization vector, truncated\nto 256 bits) of the inputted value.\nIf an integer (128 bit) is supplied the hash is computed over the little-endian representation of the\ninteger.",
      "example": "(sha512/256 1) ;; Returns 0x515a7e92e7c60522db968d81ff70b80818fc17aeabbec36baf0dda2812e94a86",
      "version": "Clarity1"
    },
    {
      "name": "slice?",
      "snippet": "slice? ${1:sequence} ${2:left-pos} ${3:right-pos}",
      "input_type": "sequence_A, uint, uint",
      "output_type": "(optional sequence_A)",
      "signature": "(slice? sequence left-position right-position)",
      "description": "The `slice?` function attempts to return a sub-sequence of that starts at `left-position` (inclusive), and\nends at `right-position` (non-inclusive).\nIf `left_position`==`right_position`, the function returns an empty sequence.\nIf either `left_position` or `right_position` are out of bounds OR if `right_position` is less than\n`left_position`, the function returns `none`.",
      "example": "(slice? \"blockstack\" u5 u10) ;; Returns (some \"stack\")\n(slice? (list 1 2 3 4 5) u5 u9) ;; Returns none\n(slice? (list 1 2 3 4 5) u3 u4) ;; Returns (some (4))\n(slice? \"abcd\" u1 u3) ;; Returns (some \"bc\")\n(slice? \"abcd\" u2 u2) ;; Returns (some \"\")\n(slice? \"abcd\" u3 u1) ;; Returns none\n",
      "version": "Clarity2"
    },
    {
      "name": "some",
      "snippet": "some ${1:value}",
      "input_type": "A",
      "output_type": "(optional A)",
      "signature": "(some value)",
      "description": "The `some` function constructs a `optional` type from the input value.",
      "example": "(some 1) ;; Returns (some 1)\n(is-none (some 2)) ;; Returns false",
      "version": "Clarity1"
    },
    {
      "name": "sqrti",
      "snippet": "sqrti ${1:expr-1}",
      "input_type": "int | uint",
      "output_type": "int | uint",
      "signature": "(sqrti n)",
      "description": "Returns the largest integer that is less than or equal to the square root of `n`.  \nFails on a negative numbers.\n",
      "example": "(sqrti u11) ;; Returns u3\n(sqrti 1000000) ;; Returns 1000\n(sqrti u1) ;; Returns u1\n(sqrti 0) ;; Returns 0\n",
      "version": "Clarity1"
    },
    {
      "name": "string-to-int?",
      "snippet": "string-to-int? ${1:string}",
      "input_type": "(string-ascii 1048576) | (string-utf8 262144)",
      "output_type": "(optional int)",
      "signature": "(string-to-int? (string-ascii|string-utf8))",
      "description": "Converts a string, either `string-ascii` or `string-utf8`, to an optional-wrapped signed integer.\nIf the input string does not represent a valid integer, then the function returns `none`. Otherwise it returns\nan integer wrapped in `some`.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(string-to-int? \"1\") ;; Returns (some 1)\n(string-to-int? u\"-1\") ;; Returns (some -1)\n(string-to-int? \"a\") ;; Returns none\n",
      "version": "Clarity2"
    },
    {
      "name": "string-to-uint?",
      "snippet": "string-to-uint? ${1:string}",
      "input_type": "(string-ascii 1048576) | (string-utf8 262144)",
      "output_type": "(optional uint)",
      "signature": "(string-to-uint? (string-ascii|string-utf8))",
      "description": "Converts a string, either `string-ascii` or `string-utf8`, to an optional-wrapped unsigned integer.\nIf the input string does not represent a valid integer, then the function returns `none`. Otherwise it returns\nan unsigned integer wrapped in `some`.\n\nNote: This function is only available starting with Stacks 2.1.",
      "example": "\n(string-to-uint? \"1\") ;; Returns (some u1)\n(string-to-uint? u\"1\") ;; Returns (some u1)\n(string-to-uint? \"a\") ;; Returns none\n",
      "version": "Clarity2"
    },
    {
      "name": "stx-account",
      "snippet": "stx-account ${1:owner}",
      "input_type": "principal",
      "output_type": "(tuple (locked uint) (unlock-height uint) (unlocked uint))",
      "signature": "(stx-account owner)",
      "description": "`stx-account` is used to query the STX account of the `owner` principal.\n\nThis function returns a tuple with the canonical account representation for an STX account.\nThis includes the current amount of unlocked STX, the current amount of locked STX, and the\nunlock height for any locked STX, all denominated in microstacks.\n",
      "example": "\n(stx-account 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR) ;; Returns (tuple (locked u0) (unlock-height u0) (unlocked u0))\n(stx-account (as-contract tx-sender)) ;; Returns (tuple (locked u0) (unlock-height u0) (unlocked u1000))\n",
      "version": "Clarity2"
    },
    {
      "name": "stx-burn?",
      "snippet": "stx-burn? ${1:amount} ${2:sender}",
      "input_type": "uint, principal",
      "output_type": "(response bool uint)",
      "signature": "(stx-burn? amount sender)",
      "description": "`stx-burn?` decreases the `sender` principal's STX holdings by `amount`,\nspecified in microstacks, by destroying the STX. The `sender` principal _must_ be equal to the current\ncontext's `tx-sender`.\n\nThis function returns (ok true) if the transfer is successful. In the event of an unsuccessful transfer it returns\none of the following error codes:\n\n`(err u1)` -- `sender` does not have enough balance to transfer\n`(err u3)` -- amount to send is non-positive\n`(err u4)` -- the `sender` principal is not the current `tx-sender`\n",
      "example": "\n(as-contract\n  (stx-burn? u60 tx-sender)) ;; Returns (ok true)\n(as-contract\n  (stx-burn? u50 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)) ;; Returns (err u4)\n",
      "version": "Clarity1"
    },
    {
      "name": "stx-get-balance",
      "snippet": "stx-get-balance ${1:owner}",
      "input_type": "principal",
      "output_type": "uint",
      "signature": "(stx-get-balance owner)",
      "description": "`stx-get-balance` is used to query the STX balance of the `owner` principal.\n\nThis function returns the STX balance, in microstacks (1 STX = 1,000,000 microstacks), of the\n`owner` principal. In the event that the `owner` principal isn't materialized, it returns 0.\n",
      "example": "\n(stx-get-balance 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR) ;; Returns u0\n(stx-get-balance (as-contract tx-sender)) ;; Returns u1000\n",
      "version": "Clarity1"
    },
    {
      "name": "stx-transfer-memo?",
      "snippet": "stx-transfer-memo? ${1:amount} ${2:sender} ${3:recipient} ${4:memo}",
      "input_type": "uint, principal, principal, buff",
      "output_type": "(response bool uint)",
      "signature": "(stx-transfer-memo? amount sender recipient memo)",
      "description": "`stx-transfer-memo?` is similar to `stx-transfer?`, except that it adds a `memo` field. \n\nThis function returns (ok true) if the transfer is successful, or, on an error, returns the same codes as `stx-transfer?`.\n",
      "example": "\n(as-contract\n  (stx-transfer-memo? u60 tx-sender 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR 0x010203)) ;; Returns (ok true)\n",
      "version": "Clarity2"
    },
    {
      "name": "stx-transfer?",
      "snippet": "stx-transfer? ${1:amount} ${2:sender} ${3:recipient}",
      "input_type": "uint, principal, principal, buff",
      "output_type": "(response bool uint)",
      "signature": "(stx-transfer? amount sender recipient)",
      "description": "`stx-transfer?` is used to increase the STX balance for the `recipient` principal\nby debiting the `sender` principal by `amount`, specified in microstacks. The `sender` principal\n _must_ be equal to the current context's `tx-sender`.\n\nThis function returns (ok true) if the transfer is successful. In the event of an unsuccessful transfer it returns\none of the following error codes:\n\n`(err u1)` -- `sender` does not have enough balance to transfer\n`(err u2)` -- `sender` and `recipient` are the same principal\n`(err u3)` -- amount to send is non-positive\n`(err u4)` -- the `sender` principal is not the current `tx-sender`\n",
      "example": "\n(as-contract\n  (stx-transfer? u60 tx-sender 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)) ;; Returns (ok true)\n(as-contract\n  (stx-transfer? u60 tx-sender 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)) ;; Returns (ok true)\n(as-contract\n  (stx-transfer? u50 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR tx-sender)) ;; Returns (err u4)\n",
      "version": "Clarity1"
    },
    {
      "name": "to-consensus-buff?",
      "snippet": "to-consensus-buff? ${1:value}",
      "input_type": "any",
      "output_type": "(optional buff)",
      "signature": "(to-consensus-buff? value)",
      "description": "`to-consensus-buff?` is a special function that will serialize any\nClarity value into a buffer, using the SIP-005 serialization of the\nClarity value. Not all values can be serialized: some value's\nconsensus serialization is too large to fit in a Clarity buffer (this\nis because of the type prefix in the consensus serialization).\n\nIf the value cannot fit as serialized into the maximum buffer size,\nthis returns `none`, otherwise, it will be\n`(some consensus-serialized-buffer)`. During type checking, the\nanalyzed type of the result of this method will be the maximum possible\nconsensus buffer length based on the inferred type of the supplied value.\n",
      "example": "\n(to-consensus-buff? 1) ;; Returns (some 0x0000000000000000000000000000000001)\n(to-consensus-buff? u1) ;; Returns (some 0x0100000000000000000000000000000001)\n(to-consensus-buff? true) ;; Returns (some 0x03)\n(to-consensus-buff? false) ;; Returns (some 0x04)\n(to-consensus-buff? none) ;; Returns (some 0x09)\n(to-consensus-buff? 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR) ;; Returns (some 0x051fa46ff88886c2ef9762d970b4d2c63678835bd39d)\n(to-consensus-buff? { abc: 3, def: 4 }) ;; Returns (some 0x0c00000002036162630000000000000000000000000000000003036465660000000000000000000000000000000004)\n",
      "version": "Clarity2"
    },
    {
      "name": "to-int",
      "snippet": "to-int ${1:uint}",
      "input_type": "uint",
      "output_type": "int",
      "signature": "(to-int u)",
      "description": "Tries to convert the `uint` argument to an `int`. Will cause a runtime error and abort if the supplied argument is >= `pow(2, 127)`",
      "example": "(to-int u238) ;; Returns 238",
      "version": "Clarity1"
    },
    {
      "name": "to-uint",
      "snippet": "to-uint ${1:int}",
      "input_type": "int",
      "output_type": "uint",
      "signature": "(to-uint i)",
      "description": "Tries to convert the `int` argument to a `uint`. Will cause a runtime error and abort if the supplied argument is negative.",
      "example": "(to-uint 238) ;; Returns u238",
      "version": "Clarity1"
    },
    {
      "name": "try!",
      "snippet": "try! ${1:algebraic-expr}",
      "input_type": "(optional A) | (response A B)",
      "output_type": "A",
      "signature": "(try! option-input)",
      "description": "The `try!` function attempts to 'unpack' the first argument: if the argument is\nan option type, and the argument is a `(some ...)` option, `try!` returns the inner value of the\noption. If the argument is a response type, and the argument is an `(ok ...)` response, `try!` returns\n the inner value of the `ok`. If the supplied argument is either an `(err ...)` or a `none` value,\n`try!` _returns_ either `none` or the `(err ...)` value from the current function and exits the current control-flow.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(try! (map-get? names-map { name: \"blockstack\" })) ;; Returns (tuple (id 1337))\n(define-private (checked-even (x int))\n  (if (is-eq (mod x 2) 0)\n      (ok x)\n      (err false)))\n(define-private (double-if-even (x int))\n  (ok (* 2 (try! (checked-even x)))))\n(double-if-even 10) ;; Returns (ok 20)\n(double-if-even 3) ;; Returns (err false)\n",
      "version": "Clarity1"
    },
    {
      "name": "tuple",
      "snippet": "tuple (${1:key-1} ${2:val-1})",
      "input_type": "(key-name A), (key-name-2 B), ...",
      "output_type": "(tuple (key-name A) (key-name-2 B) ...)",
      "signature": "(tuple (key0 expr0) (key1 expr1) ...)",
      "description": "The `tuple` special form constructs a typed tuple from the supplied key and expression pairs.\nA `get` function can use typed tuples as input to select specific values from a given tuple.\nKey names may not appear multiple times in the same tuple definition. Supplied expressions are evaluated and\nassociated with the expressions' paired key name.\n\nThere is a shorthand using curly brackets of the form {key0: expr0, key1: expr, ...}",
      "example": "(tuple (name \"blockstack\") (id 1337)) ;; using tuple\n    {name: \"blockstack\", id: 1337} ;; using curly brackets",
      "version": "Clarity1"
    },
    {
      "name": "unwrap!",
      "snippet": "unwrap! ${1:algebraic-expr} (err ${2:thrown})",
      "input_type": "(optional A) | (response A B), C",
      "output_type": "A",
      "signature": "(unwrap! option-input thrown-value)",
      "description": "The `unwrap!` function attempts to 'unpack' the first argument: if the argument is\nan option type, and the argument is a `(some ...)` option, `unwrap!` returns the inner value of the\noption. If the argument is a response type, and the argument is an `(ok ...)` response, `unwrap!` returns\n the inner value of the `ok`. If the supplied argument is either an `(err ...)` or a `(none)` value,\n`unwrap!` _returns_ `thrown-value` from the current function and exits the current control-flow.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(define-private (get-name-or-err (name (string-ascii 12)))\n  (let ((raw-name (unwrap! (map-get? names-map { name: name }) (err 1))))\n       (ok raw-name)))\n\n(get-name-or-err \"blockstack\") ;; Returns (ok (tuple (id 1337)))\n(get-name-or-err \"non-existant\") ;; Returns (err 1)",
      "version": "Clarity1"
    },
    {
      "name": "unwrap-err!",
      "snippet": "unwrap-err! ${1:algebraic-expr} (err ${2:thrown})",
      "input_type": "(response A B), C",
      "output_type": "B",
      "signature": "(unwrap-err! response-input thrown-value)",
      "description": "The `unwrap-err!` function attempts to 'unpack' the first argument: if the argument\nis an `(err ...)` response, `unwrap-err!` returns the inner value of the `err`.\nIf the supplied argument is an `(ok ...)` value,\n`unwrap-err!` _returns_ `thrown-value` from the current function and exits the current control-flow.",
      "example": "(unwrap-err! (err 1) false) ;; Returns 1",
      "version": "Clarity1"
    },
    {
      "name": "unwrap-err-panic",
      "snippet": "unwrap-err-panic ${1:algebraic-expr}",
      "input_type": "(response A B)",
      "output_type": "B",
      "signature": "(unwrap-err-panic response-input)",
      "description": "The `unwrap-err` function attempts to 'unpack' the first argument: if the argument\nis an `(err ...)` response, `unwrap` returns the inner value of the `err`.\nIf the supplied argument is an `(ok ...)` value,\n`unwrap-err` throws a runtime error, aborting any further processing of the current transaction.",
      "example": "(unwrap-err-panic (err 1)) ;; Returns 1\n(unwrap-err-panic (ok 1)) ;; Throws a runtime exception",
      "version": "Clarity1"
    },
    {
      "name": "unwrap-panic",
      "snippet": "unwrap-panic ${1:algebraic-expr}",
      "input_type": "(optional A) | (response A B)",
      "output_type": "A",
      "signature": "(unwrap-panic option-input)",
      "description": "The `unwrap` function attempts to 'unpack' its argument: if the argument is\nan option type, and the argument is a `(some ...)` option, this function returns the inner value of the\noption. If the argument is a response type, and the argument is an `(ok ...)` response, it returns\n the inner value of the `ok`. If the supplied argument is either an `(err ...)` or a `(none)` value,\n`unwrap` throws a runtime error, aborting any further processing of the current transaction.",
      "example": "\n(define-map names-map { name: (string-ascii 12) } { id: int })\n(map-set names-map { name: \"blockstack\" } { id: 1337 })\n(unwrap-panic (map-get? names-map { name: \"blockstack\" })) ;; Returns (tuple (id 1337))\n(unwrap-panic (map-get? names-map { name: \"non-existant\" })) ;; Throws a runtime exception\n",
      "version": "Clarity1"
    },
    {
      "name": "use-trait",
      "snippet": "use-trait ${1:trait-alias} ${2:trait-identifier}",
      "input_type": "VarName, TraitIdentifier",
      "output_type": "Not Applicable",
      "signature": "(use-trait trait-alias trait-identifier)",
      "description": "`use-trait` is used to bring a trait, defined in another contract, to the current contract. Subsequent\nreferences to an imported trait are signaled with the syntax `<trait-alias>`.\n\nTraits import are defined with a name, used as an alias, and a trait identifier. Trait identifiers can either be\nusing the sugared syntax (.token-a.token-trait), or be fully qualified ('SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF.token-a.token-trait).\n\nLike other kinds of definition statements, `use-trait` may only be used at the top level of a smart contract\ndefinition (i.e., you cannot put such a statement in the middle of a function body).\n    ",
      "example": "\n(use-trait token-a-trait 'SPAXYA5XS51713FDTQ8H94EJ4V579CXMTRNBZKSF.token-a.token-trait)\n(define-public (forward-get-balance (user principal) (contract <token-a-trait>))\n  (begin\n    (ok 1)))\n",
      "version": "Clarity1"
    },
    {
      "name": "var-get",
      "snippet": "var-get ${1:var}",
      "input_type": "VarName",
      "output_type": "A",
      "signature": "(var-get var-name)",
      "description": "The `var-get` function looks up and returns an entry from a contract's data map.\nThe value is looked up using `var-name`.",
      "example": "(define-data-var cursor int 6)\n(var-get cursor) ;; Returns 6",
      "version": "Clarity1"
    },
    {
      "name": "var-set",
      "snippet": "var-set ${1:var} ${2:value}",
      "input_type": "VarName, AnyType",
      "output_type": "bool",
      "signature": "(var-set var-name expr1)",
      "description": "The `var-set` function sets the value associated with the input variable to the\ninputted value. The function always returns `true`.",
      "example": "\n(define-data-var cursor int 6)\n(var-get cursor) ;; Returns 6\n(var-set cursor (+ (var-get cursor) 1)) ;; Returns true\n(var-get cursor) ;; Returns 7",
      "version": "Clarity1"
    },
    {
      "name": "xor",
      "snippet": "xor ${1:expr-1} ${2:expr-2}",
      "input_type": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output_type": "int | uint",
      "signature": "(xor i1 i2)",
      "description": "Returns the result of bitwise exclusive or'ing `i1` with `i2`.",
      "example": "(xor 1 2) ;; Returns 3\n(xor 120 280) ;; Returns 352\n",
      "version": "Clarity1"
    }
  ],
  "keywords": [
    {
      "name": "contract-caller",
      "snippet": "contract-caller",
      "output_type": "principal",
      "description": "Returns the caller of the current contract context. If this contract is the first one called by a signed transaction,\nthe caller will be equal to the signing principal. If `contract-call?` was used to invoke a function from a new contract, `contract-caller`\nchanges to the _calling_ contract's principal. If `as-contract` is used to change the `tx-sender` context, `contract-caller` _also_ changes\nto the same contract principal.",
      "example": "(print contract-caller) ;; Will print out a Stacks address of the transaction sender",
      "version": "Clarity1"
    },
    {
      "name": "tx-sender",
      "snippet": "tx-sender",
      "output_type": "principal",
      "description": "Returns the original sender of the current transaction, or if `as-contract` was called to modify the sending context, it returns that\ncontract principal.",
      "example": "(print tx-sender) ;; Will print out a Stacks address of the transaction sender",
      "version": "Clarity1"
    },
    {
      "name": "tx-sponsor?",
      "snippet": "tx-sponsor?",
      "output_type": "optional principal",
      "description": "Returns the sponsor of the current transaction if there is a sponsor, otherwise returns None.",
      "example": "(print tx-sponsor?) ;; Will print out an optional value containing the Stacks address of the transaction sponsor",
      "version": "Clarity2"
    },
    {
      "name": "block-height",
      "snippet": "block-height",
      "output_type": "uint",
      "description": "Returns the current block height of the Stacks blockchain as an uint",
      "example": "(> block-height 1000) ;; returns true if the current block-height has passed 1000 blocks.",
      "version": "Clarity1"
    },
    {
      "name": "burn-block-height",
      "snippet": "burn-block-height",
      "output_type": "uint",
      "description": "Returns the current block height of the underlying burn blockchain as a uint",
      "example": "(> burn-block-height 1000) ;; returns true if the current height of the underlying burn blockchain has passed 1000 blocks.",
      "version": "Clarity1"
    },
    {
      "name": "chain-id",
      "snippet": "chain-id",
      "output_type": "uint",
      "description": "Returns the 32-bit chain ID of the blockchain running this transaction",
      "example": "(print chain-id) ;; Will print 'u1' if the code is running on mainnet, and 'u2147483648' on testnet, and other values on different chains.",
      "version": "Clarity2"
    },
    {
      "name": "is-in-mainnet",
      "snippet": "is-in-mainnet",
      "output_type": "bool",
      "description": "Returns a boolean indicating whether or not the code is running on the mainnet",
      "example": "(print is-in-mainnet) ;; Will print 'true' if the code is running on the mainnet",
      "version": "Clarity2"
    },
    {
      "name": "is-in-regtest",
      "snippet": "is-in-regtest",
      "output_type": "bool",
      "description": "Returns whether or not the code is running in a regression test",
      "example": "(print is-in-regtest) ;; Will print 'true' if the code is running in a regression test",
      "version": "Clarity1"
    },
    {
      "name": "stx-liquid-supply",
      "snippet": "stx-liquid-supply",
      "output_type": "uint",
      "description": "Returns the total number of micro-STX (uSTX) that are liquid in the system as of this block.",
      "example": "(print stx-liquid-supply) ;; Will print out the total number of liquid uSTX",
      "version": "Clarity1"
    },
    {
      "name": "false",
      "snippet": "false",
      "output_type": "bool",
      "description": "Boolean false constant.",
      "example": "\n(and true false) ;; Evaluates to false\n(or false true)  ;; Evaluates to true\n",
      "version": "Clarity1"
    },
    {
      "name": "none",
      "snippet": "none",
      "output_type": "(optional ?)",
      "description": "Represents the _none_ option indicating no value for a given optional (analogous to a null value).",
      "example": "\n(define-public (only-if-positive (a int))\n  (if (> a 0)\n      (some a)\n      none))\n(only-if-positive 4) ;; Returns (some 4)\n(only-if-positive (- 3)) ;; Returns none\n",
      "version": "Clarity1"
    },
    {
      "name": "true",
      "snippet": "true",
      "output_type": "bool",
      "description": "Boolean true constant.",
      "example": "\n(and true false) ;; Evaluates to false\n(or false true)  ;; Evaluates to true\n",
      "version": "Clarity1"
    }
  ]
}
